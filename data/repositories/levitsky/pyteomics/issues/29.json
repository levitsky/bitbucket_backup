{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/29/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/29/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/29/trypsin-digestion-is-not-quite-correct"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/29/vote"}}, "reporter": {"display_name": "Ian Castleden", "uuid": "{7de07194-6ca1-4d30-9697-51837f19d3a6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7de07194-6ca1-4d30-9697-51837f19d3a6%7D"}, "html": {"href": "https://bitbucket.org/%7B7de07194-6ca1-4d30-9697-51837f19d3a6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:79dfa78f-e29e-4a58-b214-4c2e2985e047/ba2e0c12-205a-40e0-8eaa-880bd1e6a600/128"}}, "nickname": "athaliana", "type": "user", "account_id": "557058:79dfa78f-e29e-4a58-b214-4c2e2985e047"}, "title": "Trypsin digestion is not quite correct", "component": null, "votes": 0, "watches": 1, "content": {"raw": "According to Expasy, trypsin digestion has some exceptions:\r\nhttps://web.expasy.org/peptide_cutter/peptidecutter_enzymes.html#exceptions\r\n\r\nIt would be good to fold the exceptions into the RE but\r\nthis is beyond me....\r\n\r\nThis is possibly more correct in the `_cleave` code:\r\n\r\n```\r\n#!python\r\n\r\nexc = re.compile(r'((?<=[CD])K(?=D))|((?<=C)K(?=[HY]))|((?<=C)R(?=K))|((?<=R)R(?=[HR]))')\r\n\r\ndef trypsin_exception(i, seq):\r\n    m = exc.search(seq, max(0, i - 2), i + 1)\r\n    return bool(m)\r\n     \r\n\r\n[x.end() for x in re.finditer(trypsin, seq) if not trypsin_exception(x.end(),  seq)]\r\n```", "markup": "markdown", "html": "<p>According to Expasy, trypsin digestion has some exceptions:\n<a href=\"https://web.expasy.org/peptide_cutter/peptidecutter_enzymes.html#exceptions\" rel=\"nofollow\" class=\"ap-connect-link\">https://web.expasy.org/peptide_cutter/peptidecutter_enzymes.html#exceptions</a></p>\n<p>It would be good to fold the exceptions into the RE but\nthis is beyond me....</p>\n<p>This is possibly more correct in the <code>_cleave</code> code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;((?&lt;=[CD])K(?=D))|((?&lt;=C)K(?=[HY]))|((?&lt;=C)R(?=K))|((?&lt;=R)R(?=[HR]))&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">trypsin_exception</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">):</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"n\">trypsin</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">trypsin_exception</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span>  <span class=\"n\">seq</span><span class=\"p\">)]</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-07-07T03:33:37.733337+00:00", "milestone": null, "updated_on": "2018-07-18T18:51:55.927942+00:00", "type": "issue", "id": 29}