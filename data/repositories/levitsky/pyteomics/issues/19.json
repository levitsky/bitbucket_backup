{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/19/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/19/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/19/more-of-a-question-than-issue"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/19/vote"}}, "reporter": {"display_name": "Matteo Lacki", "uuid": "{0aa740a7-9fa8-4a45-ad13-18e05528160e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0aa740a7-9fa8-4a45-ad13-18e05528160e%7D"}, "html": {"href": "https://bitbucket.org/%7B0aa740a7-9fa8-4a45-ad13-18e05528160e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/696a8c1520b815233582aa1bf923a809d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsML-5.png"}}, "nickname": "Mateusz \u0141\u0105cki", "type": "user", "account_id": "557058:aa1b63e0-6c01-4920-aa1a-b9e9368b25b2"}, "title": "More of a question than issue", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi,\r\n\r\nFirst of all, this software is great, thanks.\r\nI am using it to access mzXml files, mainly like that:\r\n```\r\n#!python\r\nwith mzxml.read(path) as reader:\r\n    k = 0\r\n    for spectrum in reader:\r\n        mz = spectrum['m/z array']\r\n        intensity = spectrum['intensity array']\r\n    yield mz, intensity\r\n```\r\n\r\nMy question is: do you have a direct generator of (mz,intensity) tuples?\r\nI mean something like that:\r\n\r\n```\r\n#!python\r\nwith mzxml.read(path) as reader:\r\n    k = 0\r\n    for spectrum in reader:\r\n        for mz, intensity in spectrum:\r\n            yield mz, intensity, spectrum.run_numbers\r\n```\r\n\r\nI don't know how your parser works underneath Python,\r\nbut I was wondering if you can save on RAM.\r\n\r\nBest wishes!", "markup": "markdown", "html": "<p>Hi,</p>\n<p>First of all, this software is great, thanks.\nI am using it to access mzXml files, mainly like that:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">mzxml</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">spectrum</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"n\">mz</span> <span class=\"o\">=</span> <span class=\"n\">spectrum</span><span class=\"p\">[</span><span class=\"s1\">&#39;m/z array&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">intensity</span> <span class=\"o\">=</span> <span class=\"n\">spectrum</span><span class=\"p\">[</span><span class=\"s1\">&#39;intensity array&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">yield</span> <span class=\"n\">mz</span><span class=\"p\">,</span> <span class=\"n\">intensity</span>\n</pre></div>\n\n\n<p>My question is: do you have a direct generator of (mz,intensity) tuples?\nI mean something like that:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">mzxml</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">spectrum</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">mz</span><span class=\"p\">,</span> <span class=\"n\">intensity</span> <span class=\"ow\">in</span> <span class=\"n\">spectrum</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">mz</span><span class=\"p\">,</span> <span class=\"n\">intensity</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span><span class=\"o\">.</span><span class=\"n\">run_numbers</span>\n</pre></div>\n\n\n<p>I don't know how your parser works underneath Python,\nbut I was wondering if you can save on RAM.</p>\n<p>Best wishes!</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-11-17T10:40:22.770279+00:00", "milestone": null, "updated_on": "2017-11-19T18:58:06.261569+00:00", "type": "issue", "id": 19}