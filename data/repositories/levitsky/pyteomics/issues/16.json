{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/16/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/16/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/16/checking-of-string-inclusivity-in"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/16/vote"}}, "reporter": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "title": "Checking of string inclusivity in _get_info-related dictionaries of formats using base64 encoded data is dangerous", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In the `mzml` module, `_get_info_smart` uses the `in` operator to check to see if a particular string key is in the `info` variable returned by `_get_info`. `_get_info` usually returns a `dict`, except when it encounters a tag whose only purpose is to contain text, in which case it returns the tag's text instead of a `dict`.\r\n\r\nThis is dangerous if the same string may be present either as a key or as the contents of a tag's text. This should be rare since the range of values tested for is small, only \"binary\" and \"binaryDataArray\". Unfortunately, rare events do happen.\r\n\r\nIn this example, one of the base64 encoded blobs in an mzML file contains the sequence \"binary\" in the encoded text:\r\n\r\n\"bQ2vj1EQ8ocJHBNQi6bTsURUFFmReTN2Dct/2cedBZ6aJFKZH+zt6MGlh8VbK/BVK45+57Cze2qPVGoC11SOw3aP/iZ/sKfDfuTE**binary**pfyL0i5o/tsx5AD0n5x9xgeXNfx+HYVshqTiivDO+5se2nBwXbD0DLS73TJtC4smrXgvQvk7pDbBMI6yKCcaCk4YfEyFUf\"\r\n\r\nThe check in the code is:\r\n```python\r\n        if 'binary' in info:\r\n```\r\n\r\nTo make the check handle this scenario:\r\n```python\r\n        if 'binary' in info and isinstance(info, dict):\r\n```\r\n\r\nConceivably, this could happen anywhere we might receive a string instead of a dictionary,  but it's most unpredictable around the base64 blobs.", "markup": "markdown", "html": "<p>In the <code>mzml</code> module, <code>_get_info_smart</code> uses the <code>in</code> operator to check to see if a particular string key is in the <code>info</code> variable returned by <code>_get_info</code>. <code>_get_info</code> usually returns a <code>dict</code>, except when it encounters a tag whose only purpose is to contain text, in which case it returns the tag's text instead of a <code>dict</code>.</p>\n<p>This is dangerous if the same string may be present either as a key or as the contents of a tag's text. This should be rare since the range of values tested for is small, only \"binary\" and \"binaryDataArray\". Unfortunately, rare events do happen.</p>\n<p>In this example, one of the base64 encoded blobs in an mzML file contains the sequence \"binary\" in the encoded text:</p>\n<p>\"bQ2vj1EQ8ocJHBNQi6bTsURUFFmReTN2Dct/2cedBZ6aJFKZH+zt6MGlh8VbK/BVK45+57Cze2qPVGoC11SOw3aP/iZ/sKfDfuTE<strong>binary</strong>pfyL0i5o/tsx5AD0n5x9xgeXNfx+HYVshqTiivDO+5se2nBwXbD0DLS73TJtC4smrXgvQvk7pDbBMI6yKCcaCk4YfEyFUf\"</p>\n<p>The check in the code is:</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"k\">if</span> <span class=\"s1\">&#39;binary&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n</pre></div>\n\n\n<p>To make the check handle this scenario:</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"k\">if</span> <span class=\"s1\">&#39;binary&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n</pre></div>\n\n\n<p>Conceivably, this could happen anywhere we might receive a string instead of a dictionary,  but it's most unpredictable around the base64 blobs.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-01-12T16:39:03.744140+00:00", "milestone": null, "updated_on": "2017-01-12T22:37:49.213548+00:00", "type": "issue", "id": 16}