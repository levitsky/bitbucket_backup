{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/46/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/46.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/46/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/46/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/46/unit-primitives-and-cvstr-use-excessive"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/46/vote"}}, "reporter": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "title": "unit-primitives and cvstr use excessive memory", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When I made the `unit`-primitives, I didn\u2019t think about memory consumption:\r\n\r\n```python\r\nfrom pyteomics.auxiliary.structures import unitfloat\r\nfrom pympler import asizeof\r\n\r\nx = unitfloat(50.0, \"m/z\")\r\nprint(asizeof.asizeof(x))\r\n# >>> 424\r\nprint(asizeof.asizeof(50.0))\r\n# >>> 24\r\nprint(asizeof.asizeof(\"m/z\"))\r\n# >>> 40\r\n```\r\n\r\nFortunately, this is pretty easy to fix, just slap `__slots__` on the types.\r\n\r\n```python\r\nclass lightunitfloat(float):\r\n    __slots__ = ('unit_info', )\r\n     def __new__(cls, value, unit_info=None):\r\n             inst = super(lightunitfloat, cls).__new__(cls, value)\r\n             inst.unit_info = unit_info\r\n     return inst\r\n\r\ny = lightunitfloat(50.0, \"m/z\")\r\nprint(asizeof.asizeof(y))\r\n# >>> 160\r\n```\r\n\r\nThis has the downside of making unpickling previously pickled instances break because the default unpickling logic assumes `__dict__`exists. We can solve that by adding:\r\n\r\n```python\r\nclass _MappingOverAttributeProxy(object):\r\n    '''A replacement for __dict__ for unpickling an object which once\r\n    has __slots__ now but did not before.'''\r\n\r\n    def __init__(self, obj):\r\n        self.obj = obj\r\n\r\n    def __getitem__(self, key):\r\n        return getattr(self.obj, key)\r\n\r\n    def __setitem__(self, key, value):\r\n        setattr(self.obj, key, value)\r\n\r\n    def __contains__(self, key):\r\n        return hasattr(self.obj, key)\r\n\r\n    def __repr__(self):\r\n        return \"{self.__class__.__name__}({self.obj})\".format(self=self)\r\n\r\nclass lightunitfloat(float):\r\n    __slots__ = ('unit_info', )\r\n    def __new__(cls, value, unit_info=None):\r\n        inst = super(lightunitfloat, cls).__new__(cls, value)\r\n        inst.unit_info = unit_info\r\n        return inst\r\n\r\n   def __reduce__(self):\r\n         return self.__class__, (float(self), self.unit_info)\r\n\r\n   @property\r\n   def __dict__(self):\r\n        return _MappingOverAttributeProxy(self)\r\n```\r\n\r\nI\u2019ll open a PR for this in the next few days.", "markup": "markdown", "html": "<p>When I made the <code>unit</code>-primitives, I didn\u2019t think about memory consumption:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pyteomics.auxiliary.structures</span> <span class=\"kn\">import</span> <span class=\"n\">unitfloat</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pympler</span> <span class=\"kn\">import</span> <span class=\"n\">asizeof</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">unitfloat</span><span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;m/z&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt;&gt;&gt; 424</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt;&gt;&gt; 24</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"s2\">&quot;m/z&quot;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt;&gt;&gt; 40</span>\n</pre></div>\n\n\n<p>Fortunately, this is pretty easy to fix, just slap <code>__slots__</code> on the types.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">lightunitfloat</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;unit_info&#39;</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n     <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit_info</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n             <span class=\"n\">inst</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">lightunitfloat</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n             <span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">unit_info</span> <span class=\"o\">=</span> <span class=\"n\">unit_info</span>\n     <span class=\"k\">return</span> <span class=\"n\">inst</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">lightunitfloat</span><span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;m/z&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"c1\"># &gt;&gt;&gt; 160</span>\n</pre></div>\n\n\n<p>This has the downside of making unpickling previously pickled instances break because the default unpickling logic assumes <code>__dict__</code>exists. We can solve that by adding:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">_MappingOverAttributeProxy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A replacement for __dict__ for unpickling an object which once</span>\n<span class=\"sd\">    has __slots__ now but did not before.&#39;&#39;&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__contains__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;{self.__class__.__name__}({self.obj})&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">lightunitfloat</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;unit_info&#39;</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit_info</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">inst</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">lightunitfloat</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">unit_info</span> <span class=\"o\">=</span> <span class=\"n\">unit_info</span>\n        <span class=\"k\">return</span> <span class=\"n\">inst</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_info</span><span class=\"p\">)</span>\n\n   <span class=\"nd\">@property</span>\n   <span class=\"k\">def</span> <span class=\"nf\">__dict__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_MappingOverAttributeProxy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I\u2019ll open a PR for this in the next few days.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-10-17T02:24:07.141398+00:00", "milestone": null, "updated_on": "2019-10-26T16:02:32.787837+00:00", "type": "issue", "id": 46}