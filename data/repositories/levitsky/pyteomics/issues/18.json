{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/18/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/18/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/18/make-binary-array-decoding-optional"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/18/vote"}}, "reporter": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "title": "Make binary array decoding optional", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When iterating over an mzML or mzXML file with many big binary arrays, a large portion of time is spent doing binary decoding. For use cases like looping over the file to determine which scans are MS1 vs. MS2, this could cost a substantial amount of time. For my example, I've created a simple subclass which never decodes arrays. \r\n\r\n```python\r\nclass NonDecodingMzML(mzml.MzML):\r\n    def _handle_binary(self, info, **kwargs):\r\n        b = info.pop('binary')\r\n        name = self._detect_array_name(info)\r\n        if name == 'binary':\r\n            info[name] = b\r\n        else:\r\n            info = {name: b}\r\n        return info\r\n```\r\n\r\nTo test the performance numbers, I looped over a large mzML file with both `MzML` and `NonDecodingMzML` with the profiler turned on. Here are the numbers for the decoding `MzML`:\r\n\r\n```\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n    23538   28.378    0.001   28.378    0.001 {binascii.a2b_base64}\r\n    15358   22.254    0.001  111.727    0.007 xml.py:388(iterfind)\r\n    23538   21.668    0.001   21.668    0.001 {method 'encode' of 'str' objects}\r\n198480/15357   16.859    0.000   87.290    0.006 xml.py:311(_get_info)\r\n198480/15357   13.265    0.000   87.480    0.006 mzml.py:232(_get_info_smart)\r\n```\r\n\r\nHere are the numbers for `NonDecodingMzML`:\r\n```\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n    15358   20.799    0.001   58.879    0.004 xml.py:388(iterfind)\r\n198480/15357   16.557    0.000   35.901    0.002 xml.py:311(_get_info)\r\n198480/15357   13.163    0.000   36.087    0.002 mzml.py:232(_get_info_smart)\r\n```\r\n The total time spent in `iterfind` was shrank to 52% of the original time by skipping the decoding step. \r\n\r\nI propose we add a new keyword argument to the constructor of `MzML` and `MzXML` which will be true by default that signals that binary arrays should be decoded, and when false, should be left as bytes (or completely omitted?).  If this change makes sense to you, I'll integrate the change into my fork and open a new pull request", "markup": "markdown", "html": "<p>When iterating over an mzML or mzXML file with many big binary arrays, a large portion of time is spent doing binary decoding. For use cases like looping over the file to determine which scans are MS1 vs. MS2, this could cost a substantial amount of time. For my example, I've created a simple subclass which never decodes arrays. </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">NonDecodingMzML</span><span class=\"p\">(</span><span class=\"n\">mzml</span><span class=\"o\">.</span><span class=\"n\">MzML</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_handle_binary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_detect_array_name</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">info</span>\n</pre></div>\n\n\n<p>To test the performance numbers, I looped over a large mzML file with both <code>MzML</code> and <code>NonDecodingMzML</code> with the profiler turned on. Here are the numbers for the decoding <code>MzML</code>:</p>\n<div class=\"codehilite\"><pre><span></span>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    23538   28.378    0.001   28.378    0.001 {binascii.a2b_base64}\n    15358   22.254    0.001  111.727    0.007 xml.py:388(iterfind)\n    23538   21.668    0.001   21.668    0.001 {method &#39;encode&#39; of &#39;str&#39; objects}\n198480/15357   16.859    0.000   87.290    0.006 xml.py:311(_get_info)\n198480/15357   13.265    0.000   87.480    0.006 mzml.py:232(_get_info_smart)\n</pre></div>\n\n\n<p>Here are the numbers for <code>NonDecodingMzML</code>:</p>\n<div class=\"codehilite\"><pre><span></span>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    15358   20.799    0.001   58.879    0.004 xml.py:388(iterfind)\n198480/15357   16.557    0.000   35.901    0.002 xml.py:311(_get_info)\n198480/15357   13.163    0.000   36.087    0.002 mzml.py:232(_get_info_smart)\n</pre></div>\n\n\n<p>The total time spent in <code>iterfind</code> was shrank to 52% of the original time by skipping the decoding step. </p>\n<p>I propose we add a new keyword argument to the constructor of <code>MzML</code> and <code>MzXML</code> which will be true by default that signals that binary arrays should be decoded, and when false, should be left as bytes (or completely omitted?).  If this change makes sense to you, I'll integrate the change into my fork and open a new pull request</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-08-23T01:41:22.470764+00:00", "milestone": null, "updated_on": "2017-08-26T14:54:32.647639+00:00", "type": "issue", "id": 18}