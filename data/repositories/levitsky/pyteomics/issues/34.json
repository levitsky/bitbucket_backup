{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/34/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/34/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/34/parser-fails-on-numbers-in-modx-sequence"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/34/vote"}}, "reporter": {"display_name": "Lars Kolbowski", "uuid": "{fc1df402-e755-41a0-b5a6-d80421a2af72}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfc1df402-e755-41a0-b5a6-d80421a2af72%7D"}, "html": {"href": "https://bitbucket.org/%7Bfc1df402-e755-41a0-b5a6-d80421a2af72%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5bc99e3bd64558662e6d627e/dab57bdc-7f90-48ff-9610-606fbf956a58/128"}}, "nickname": "Lars Kolbowski", "type": "user", "account_id": "5bc99e3bd64558662e6d627e"}, "title": "parser fails on numbers in modX sequence", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi there, \r\n\r\nI'm trying to use pyteomics to calculate masses including modifcations in modX syntax.\r\nThe documentation states:\r\n\r\n\"The labels (or codes) for the 20 standard amino acids in modX are the same as in IUPAC nomeclature. A label for a modified amino acid has a general form of \u2018modX\u2019, i.e.:\r\n\r\n**it starts with an arbitrary number of lower-case symbols or numbers** (a modification);\r\nit ends with a single upper-case symbol (an amino acid residue).\"\r\n\r\nBut when I include numbers in my modifications the script crashes. See example below:\r\n\r\n\r\n```\r\n#!python\r\n\r\nfrom pyteomics import mass\r\nmod_compositions = {'bs3oh': mass.Composition('C8H12O3')}\r\naa_compositions = dict(mass.std_aa_comp)\r\naa_compositions.update(mod_compositions)\r\nmass.calculate_mass(sequence='LAbs3ohK', aa_comp=aa_compositions)\r\n```\r\n\r\n\r\n```\r\n#!python\r\n\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/parser.py\", line 275, in parse\r\n    n, body, c = re.match(_modX_sequence, sequence).groups()\r\nAttributeError: 'NoneType' object has no attribute 'groups'\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3267, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-14-4fecb2be2899>\", line 8, in <module>\r\n    mass.calculate_mass(sequence='LAbs3ohK', aa_comp=aa_compositions)\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py\", line 506, in calculate_mass\r\n    else Composition(*args, **kwargs))\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py\", line 294, in __init__\r\n    mass_data if kwa == 'formula' else aa_comp)\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py\", line 200, in _from_sequence\r\n    show_unmodified_termini=True)\r\n  File \"/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/parser.py\", line 277, in parse\r\n    raise PyteomicsError('Not a valid modX sequence: ' + sequence)\r\npyteomics.auxiliary.structures.PyteomicsError: Pyteomics error, message: 'Not a valid modX sequence: LAbs3ohK'\r\n```", "markup": "markdown", "html": "<p>Hi there, </p>\n<p>I'm trying to use pyteomics to calculate masses including modifcations in modX syntax.\nThe documentation states:</p>\n<p>\"The labels (or codes) for the 20 standard amino acids in modX are the same as in IUPAC nomeclature. A label for a modified amino acid has a general form of \u2018modX\u2019, i.e.:</p>\n<p><strong>it starts with an arbitrary number of lower-case symbols or numbers</strong> (a modification);\nit ends with a single upper-case symbol (an amino acid residue).\"</p>\n<p>But when I include numbers in my modifications the script crashes. See example below:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pyteomics</span> <span class=\"kn\">import</span> <span class=\"n\">mass</span>\n<span class=\"n\">mod_compositions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;bs3oh&#39;</span><span class=\"p\">:</span> <span class=\"n\">mass</span><span class=\"o\">.</span><span class=\"n\">Composition</span><span class=\"p\">(</span><span class=\"s1\">&#39;C8H12O3&#39;</span><span class=\"p\">)}</span>\n<span class=\"n\">aa_compositions</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">mass</span><span class=\"o\">.</span><span class=\"n\">std_aa_comp</span><span class=\"p\">)</span>\n<span class=\"n\">aa_compositions</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">mod_compositions</span><span class=\"p\">)</span>\n<span class=\"n\">mass</span><span class=\"o\">.</span><span class=\"n\">calculate_mass</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"o\">=</span><span class=\"s1\">&#39;LAbs3ohK&#39;</span><span class=\"p\">,</span> <span class=\"n\">aa_comp</span><span class=\"o\">=</span><span class=\"n\">aa_compositions</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite language-python\"><pre><span></span>  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/parser.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">275</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">parse</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">_modX_sequence</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NoneType&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;groups&#39;</span>\n<span class=\"n\">During</span> <span class=\"n\">handling</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">above</span> <span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">another</span> <span class=\"n\">exception</span> <span class=\"n\">occurred</span><span class=\"p\">:</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/IPython/core/interactiveshell.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">3267</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run_code</span>\n    <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"n\">code_obj</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_global_ns</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_ns</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;&lt;ipython-input-14-4fecb2be2899&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">mass</span><span class=\"o\">.</span><span class=\"n\">calculate_mass</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"o\">=</span><span class=\"s1\">&#39;LAbs3ohK&#39;</span><span class=\"p\">,</span> <span class=\"n\">aa_comp</span><span class=\"o\">=</span><span class=\"n\">aa_compositions</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">506</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">calculate_mass</span>\n    <span class=\"k\">else</span> <span class=\"n\">Composition</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">294</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"n\">mass_data</span> <span class=\"k\">if</span> <span class=\"n\">kwa</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;formula&#39;</span> <span class=\"k\">else</span> <span class=\"n\">aa_comp</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/mass/mass.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_from_sequence</span>\n    <span class=\"n\">show_unmodified_termini</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lars/.local/share/virtualenvs/6gmOU3S_/lib/python3.6/site-packages/pyteomics/parser.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">277</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">parse</span>\n    <span class=\"k\">raise</span> <span class=\"n\">PyteomicsError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not a valid modX sequence: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">sequence</span><span class=\"p\">)</span>\n<span class=\"n\">pyteomics</span><span class=\"o\">.</span><span class=\"n\">auxiliary</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">PyteomicsError</span><span class=\"p\">:</span> <span class=\"n\">Pyteomics</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Not a valid modX sequence: LAbs3ohK&#39;</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-11-13T11:04:07.459206+00:00", "milestone": null, "updated_on": "2018-11-13T18:17:48.975494+00:00", "type": "issue", "id": 34}