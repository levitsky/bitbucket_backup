{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"attachments": {"href": "data/repositories/levitsky/pyteomics/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/11/watch"}, "comments": {"href": "data/repositories/levitsky/pyteomics/issues/11/comments_page=1.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/11/waters-mzml-fails-due-to-ambiguity-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/issues/11/vote"}}, "reporter": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "title": "Waters mzml fails due to ambiguity of array type labels", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Hello,\r\n\r\nI'm parsing an MzML file produced by Waters, and they may not be standards-conforming in how they produced their XML, but it suggests something is missing in the mzml module.\r\n\r\nThe array type's encoding type is included in \"name\", but so is the kind of information, e.g. `\"charge array\"` or `\"intensity array\"`. The loop which searches for the name at the end of [MzML._get_info_smart,](#!/levitsky/pyteomics/src/edd65283852f3fb6fe43dc25702cb25983940ec3/pyteomics/mzml.py?at=default&fileviewer=file-view-default#mzml.py-147:151) assumes that the name is in the keys of info itself, when they are actually in list of values in `info['name']`\r\n\r\nAn extended version of the loop below\r\n\r\n```\r\n#!python\r\n\r\nfor k in info:\r\n     if k.endswith(' array') and not info[k]:\r\n     info = {k: array}\r\n         break\r\n     elif isinstance(info[k], list) and k == \"name\":\r\n         knames = info[k]\r\n         found = False\r\n         for val in knames:\r\n             if val.endswith(\" array\"):\r\n                 info = {val: array}\r\n                 found = True\r\n                 break\r\n           if found:\r\n               break\r\nelse:\r\n    info['binary'] = array\r\n```\r\n\r\nhandles this issue.\r\n\r\nThe for loop's `else` clause contained a typo, `info['binary'] == array` which caused the function to error out as 'binary' had just been removed from `info` above. I've attached the adjusted version of the mzml module, which passes all tests. I am not sure if I can share the raw data itself as I do not own it. \r\n\r\nWith this adjustment it parses this new data, and continues to pass the mzml unit test. Alternatively, I can commit this code to my branch and open a pull request.\r\n\r\nThank you\r\n\r\n\r\n ", "markup": "markdown", "html": "<p>Hello,</p>\n<p>I'm parsing an MzML file produced by Waters, and they may not be standards-conforming in how they produced their XML, but it suggests something is missing in the mzml module.</p>\n<p>The array type's encoding type is included in \"name\", but so is the kind of information, e.g. <code>\"charge array\"</code> or <code>\"intensity array\"</code>. The loop which searches for the name at the end of <a data-is-external-link=\"true\" href=\"#!/levitsky/pyteomics/src/edd65283852f3fb6fe43dc25702cb25983940ec3/pyteomics/mzml.py?at=default&amp;fileviewer=file-view-default#mzml.py-147:151\" rel=\"nofollow\">MzML._get_info_smart,</a> assumes that the name is in the keys of info itself, when they are actually in list of values in <code>info['name']</code></p>\n<p>An extended version of the loop below</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n     <span class=\"k\">if</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39; array&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]:</span>\n     <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">}</span>\n         <span class=\"k\">break</span>\n     <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span>\n         <span class=\"n\">knames</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n         <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n         <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">knames</span><span class=\"p\">:</span>\n             <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot; array&quot;</span><span class=\"p\">):</span>\n                 <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">}</span>\n                 <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                 <span class=\"k\">break</span>\n           <span class=\"k\">if</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n               <span class=\"k\">break</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span>\n</pre></div>\n\n\n<p>handles this issue.</p>\n<p>The for loop's <code>else</code> clause contained a typo, <code>info['binary'] == array</code> which caused the function to error out as 'binary' had just been removed from <code>info</code> above. I've attached the adjusted version of the mzml module, which passes all tests. I am not sure if I can share the raw data itself as I do not own it. </p>\n<p>With this adjustment it parses this new data, and continues to pass the mzml unit test. Alternatively, I can commit this code to my branch and open a pull request.</p>\n<p>Thank you</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-10-20T17:36:43.061953+00:00", "milestone": null, "updated_on": "2015-10-25T22:01:22.995333+00:00", "type": "issue", "id": 11}