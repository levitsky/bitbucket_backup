{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23716394.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23716394"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "The first two deprecation warnings are internal to SQLAlchemy not yet updating for changes Python 3.5 introduced in preparation for future removal.\n\nThe latter two warnings are due to my using plain string literals in the unit test because the strings do not contain non-ASCII characters, and SQLAlchemy automatically casts byte strings to unicode strings when the mapping class definition says something is a unicode string. Since string literals in Python 3 are unicode strings, you won't see this message there. Adding the `u` prefix would remove those warnings if they're causing trouble. The reason you see these warnings when you use an existing database rather than creating one fresh from the source XML, is evidently because I don't know how to use the `warnings`  module. In the `load` function at line 627 invokes `warnings.simplefilter` to squash SAWarning messages since they fire a lot during the load process. I thought I had used a context manager but apparently not, so all such warnings are suppressed after calling `load`. Since Python 2's byte strings are just a codec over a raw byte buffer, casting them to unicode just enforces a particular codec on the buffer.\n\nAs for the package organization, it's a reasonable thing to do, particularly since it preserves backwards compatibility.", "markup": "markdown", "html": "<p>The first two deprecation warnings are internal to SQLAlchemy not yet updating for changes Python 3.5 introduced in preparation for future removal.</p>\n<p>The latter two warnings are due to my using plain string literals in the unit test because the strings do not contain non-ASCII characters, and SQLAlchemy automatically casts byte strings to unicode strings when the mapping class definition says something is a unicode string. Since string literals in Python 3 are unicode strings, you won't see this message there. Adding the <code>u</code> prefix would remove those warnings if they're causing trouble. The reason you see these warnings when you use an existing database rather than creating one fresh from the source XML, is evidently because I don't know how to use the <code>warnings</code>  module. In the <code>load</code> function at line 627 invokes <code>warnings.simplefilter</code> to squash SAWarning messages since they fire a lot during the load process. I thought I had used a context manager but apparently not, so all such warnings are suppressed after calling <code>load</code>. Since Python 2's byte strings are just a codec over a raw byte buffer, casting them to unicode just enforces a particular codec on the buffer.</p>\n<p>As for the package organization, it's a reasonable thing to do, particularly since it preserves backwards compatibility.</p>", "type": "rendered"}, "created_on": "2015-12-01T14:33:31.727899+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23716394}