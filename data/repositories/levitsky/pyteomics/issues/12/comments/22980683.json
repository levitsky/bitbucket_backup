{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/22980683.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-22980683"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "First of all, I like the idea of representing a database using proper tools. Thank you for the suggestion and for this prototype.\n\nI also have to admit I have zero experience with SQLAlchemy at any level. But, if my general understanding is correct, having SA as an extra dependency also provides the benefit of a more elegant query interface than just plain SQL forced by the built-in `sqlite3`. What we (I) will need to do is provide some nice examples of use.\n\nQuestions/issues regarding your prototype:\n\n* it only seems to work with accession numbers for now (chokes on strings with a `TypeError`)\n* what I guess is helpful in my current `Unimod` implementation is the conversion of compositions. It's basically the only connection between `mass.Unimod` and the rest of the library. Can we keep this with the new approach?\n\nMinor stuff:\n\n* This is *almost* 3.x-compatible right now, the only thing needed is to define `basestring` at the top.\n* Wouldn't hurt to implement the methods the current `Unimod` exposes for the sake of compatibility.", "markup": "markdown", "html": "<p>First of all, I like the idea of representing a database using proper tools. Thank you for the suggestion and for this prototype.</p>\n<p>I also have to admit I have zero experience with SQLAlchemy at any level. But, if my general understanding is correct, having SA as an extra dependency also provides the benefit of a more elegant query interface than just plain SQL forced by the built-in <code>sqlite3</code>. What we (I) will need to do is provide some nice examples of use.</p>\n<p>Questions/issues regarding your prototype:</p>\n<ul>\n<li>it only seems to work with accession numbers for now (chokes on strings with a <code>TypeError</code>)</li>\n<li>what I guess is helpful in my current <code>Unimod</code> implementation is the conversion of compositions. It's basically the only connection between <code>mass.Unimod</code> and the rest of the library. Can we keep this with the new approach?</li>\n</ul>\n<p>Minor stuff:</p>\n<ul>\n<li>This is <em>almost</em> 3.x-compatible right now, the only thing needed is to define <code>basestring</code> at the top.</li>\n<li>Wouldn't hurt to implement the methods the current <code>Unimod</code> exposes for the sake of compatibility.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-11-01T12:10:05.225785+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 22980683}