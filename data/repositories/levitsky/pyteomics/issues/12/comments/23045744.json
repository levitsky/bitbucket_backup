{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23045744.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23045744"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "I was wondering where the brick-composition business would crop up. I even looked up an oligosaccharide modification and didn't see it there. Yes, tests and the no-argument constructor are definitely a good idea. Treating this as a submodule would make it easier to change it independently of the rest of the `mass` module.\n\nA lot of the power that we could use but aren't is in the Specificity. Right now, you have a function, parser.[isoforms](https://pythonhosted.org/pyteomics/api/parser.html#pyteomics.parser.isoforms) which let's the user completely specify all the rules for placing modifications in a dictionary. The Specificity can be translated into a rule for placing modifications. Early on in my first project in proteomics, I [wrote some Python classes](https://github.com/mobiusklein/glycresoft_sqlalchemy/blob/master/glycresoft_sqlalchemy/structure/modification.py#L157) for finding viable modification sites on a given peptide sequence. This code is old and needs to be restructured, but this is something that could be ported over or re-implemented with minimal agony. \n\nClassification might be useful for applications reasoning *about* how to include modifications in a search. For example you might ignore modifications which are from the `Isotopic label` class if you're not doing something with isotope labeling.\n\nSQLAlchemy is a very complicated machine, and I'll refrain from writing much using it's more \"magical\" features since they're liable to shoot me in the foot.\n\nI'll post a fix for the composition bit shortly.\n", "markup": "markdown", "html": "<p>I was wondering where the brick-composition business would crop up. I even looked up an oligosaccharide modification and didn't see it there. Yes, tests and the no-argument constructor are definitely a good idea. Treating this as a submodule would make it easier to change it independently of the rest of the <code>mass</code> module.</p>\n<p>A lot of the power that we could use but aren't is in the Specificity. Right now, you have a function, parser.<a data-is-external-link=\"true\" href=\"https://pythonhosted.org/pyteomics/api/parser.html#pyteomics.parser.isoforms\" rel=\"nofollow\">isoforms</a> which let's the user completely specify all the rules for placing modifications in a dictionary. The Specificity can be translated into a rule for placing modifications. Early on in my first project in proteomics, I <a data-is-external-link=\"true\" href=\"https://github.com/mobiusklein/glycresoft_sqlalchemy/blob/master/glycresoft_sqlalchemy/structure/modification.py#L157\" rel=\"nofollow\">wrote some Python classes</a> for finding viable modification sites on a given peptide sequence. This code is old and needs to be restructured, but this is something that could be ported over or re-implemented with minimal agony. </p>\n<p>Classification might be useful for applications reasoning <em>about</em> how to include modifications in a search. For example you might ignore modifications which are from the <code>Isotopic label</code> class if you're not doing something with isotope labeling.</p>\n<p>SQLAlchemy is a very complicated machine, and I'll refrain from writing much using it's more \"magical\" features since they're liable to shoot me in the foot.</p>\n<p>I'll post a fix for the composition bit shortly.</p>", "type": "rendered"}, "created_on": "2015-11-03T23:36:05.619511+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23045744}