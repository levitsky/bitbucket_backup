{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23044895.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23044895"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "This is brilliant.\n\nI still need to check out what some of the models mean (like `Classification` and others) that I've never come across.\nAs far as `Modification` compositions go, I am happy with this solution, although I could not follow from your previous comment what the other two ways were.\nI noticed that the composition for `Modification` is sometimes elemental and sometimes made of bricks. Do you think that in the latter case it would make sense to calculate the composition by adding the elemental compositions of the bricks? I see that they are all available already.\n\nIs there anything else that needs to be added (except for no-arguments Unimod constructor behavior and some tests)?\nIt looks like this machinery deserves its own namespace, like `mass.unimod` or maybe just `unimod`, what do you think?\nI am also thinking about keeping the old class in place, not to force a new dependency on users happy with the way it is, and adding a deprecation warning.", "markup": "markdown", "html": "<p>This is brilliant.</p>\n<p>I still need to check out what some of the models mean (like <code>Classification</code> and others) that I've never come across.\nAs far as <code>Modification</code> compositions go, I am happy with this solution, although I could not follow from your previous comment what the other two ways were.\nI noticed that the composition for <code>Modification</code> is sometimes elemental and sometimes made of bricks. Do you think that in the latter case it would make sense to calculate the composition by adding the elemental compositions of the bricks? I see that they are all available already.</p>\n<p>Is there anything else that needs to be added (except for no-arguments Unimod constructor behavior and some tests)?\nIt looks like this machinery deserves its own namespace, like <code>mass.unimod</code> or maybe just <code>unimod</code>, what do you think?\nI am also thinking about keeping the old class in place, not to force a new dependency on users happy with the way it is, and adding a deprecation warning.</p>", "type": "rendered"}, "created_on": "2015-11-03T22:35:11.464954+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2015-11-03T22:35:45.148105+00:00", "type": "issue_comment", "id": 23044895}