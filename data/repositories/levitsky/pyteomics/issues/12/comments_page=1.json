{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/22980683.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-22980683"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "First of all, I like the idea of representing a database using proper tools. Thank you for the suggestion and for this prototype.\n\nI also have to admit I have zero experience with SQLAlchemy at any level. But, if my general understanding is correct, having SA as an extra dependency also provides the benefit of a more elegant query interface than just plain SQL forced by the built-in `sqlite3`. What we (I) will need to do is provide some nice examples of use.\n\nQuestions/issues regarding your prototype:\n\n* it only seems to work with accession numbers for now (chokes on strings with a `TypeError`)\n* what I guess is helpful in my current `Unimod` implementation is the conversion of compositions. It's basically the only connection between `mass.Unimod` and the rest of the library. Can we keep this with the new approach?\n\nMinor stuff:\n\n* This is *almost* 3.x-compatible right now, the only thing needed is to define `basestring` at the top.\n* Wouldn't hurt to implement the methods the current `Unimod` exposes for the sake of compatibility.", "markup": "markdown", "html": "<p>First of all, I like the idea of representing a database using proper tools. Thank you for the suggestion and for this prototype.</p>\n<p>I also have to admit I have zero experience with SQLAlchemy at any level. But, if my general understanding is correct, having SA as an extra dependency also provides the benefit of a more elegant query interface than just plain SQL forced by the built-in <code>sqlite3</code>. What we (I) will need to do is provide some nice examples of use.</p>\n<p>Questions/issues regarding your prototype:</p>\n<ul>\n<li>it only seems to work with accession numbers for now (chokes on strings with a <code>TypeError</code>)</li>\n<li>what I guess is helpful in my current <code>Unimod</code> implementation is the conversion of compositions. It's basically the only connection between <code>mass.Unimod</code> and the rest of the library. Can we keep this with the new approach?</li>\n</ul>\n<p>Minor stuff:</p>\n<ul>\n<li>This is <em>almost</em> 3.x-compatible right now, the only thing needed is to define <code>basestring</code> at the top.</li>\n<li>Wouldn't hurt to implement the methods the current <code>Unimod</code> exposes for the sake of compatibility.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-11-01T12:10:05.225785+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 22980683}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/22985948.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-22985948"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Issue #1 seems to be the result of testing the raw query in an interactive session and then not copying it correctly to the text file. `|` has higher affinity than `or`. Rerunning the method call from the outside works now.\n\nIssue #2 can be solved three ways, depending upon how the composition is encoded in the database. For cases where a \"composition\" column is present, a simple parser can be used at the moment a model object (all types inheriting from Base are models) is constructed from a query result to translate the \"composition\" value from a formula into a Composition instance. For example, Acetyl is encoded with \"H(2) C(2) O\", which translates to `{\"H\": 2, \"C\": 2, \"O\": 1}`. This is also the case for `SpecificityToNeutralLoss`. However, `Brick`s are different, for whatever reason. Some bricks are just elements, in fact I think they're analogous to the elem component you parsed to build `self._massdata`. Other `Brick`s are molecules like acetate or monosaccharides. The definition of a Brick is not actually listed on Unimod's website, but it can be found in Proteowizard source code comments like [this](https://codecov.io/github/Bioconductor-mirror/mzR/src/pwiz/data/common/Unimod.cpp?ref=b6aa99c2b36dbf0b718c075093a1f8809cfae5b9#l-50) that they're used to compose formulae for modifications. Their elemental composition is encoded through a join-table, so instead of an event listener, a simple property decorator is easier than generating complicated SQL on load.\n\nI implemented the by_name and aliased it to by_title since there are now many more than two names, but there should be no ambiguity where the title of one modification is the name of another. To handle strictness, equality is handled as normal, and `contains` is emulated using an SQL `LIKE` operator with the query identifier padded with wildcards. `Unimod.mods` was simple, but, `mass_data` is harder because of the distinction between `Brick` and `Element`. The `Element` entries are unaware of specific isotopes, providing just monisotopic and average masses, while `Brick` versions of each element are particular to a specific isotope, but frequency information is missing. I can see you're doing something to back-solve the abundance of different isotopes using the average mass as a point of reference, but it's opaque. How important is that information?", "markup": "markdown", "html": "<p>Issue <a href=\"#!/levitsky/pyteomics/issues/1/missing-iter_spectrum-function\" rel=\"nofollow\" title=\"Missing iter_spectrum function...\" class=\"ap-connect-link\"><s>#1</s></a> seems to be the result of testing the raw query in an interactive session and then not copying it correctly to the text file. <code>|</code> has higher affinity than <code>or</code>. Rerunning the method call from the outside works now.</p>\n<p>Issue <a href=\"#!/levitsky/pyteomics/issues/2/compositions-from-modx-bug\" rel=\"nofollow\" title=\"Compositions from modX Bug\" class=\"ap-connect-link\"><s>#2</s></a> can be solved three ways, depending upon how the composition is encoded in the database. For cases where a \"composition\" column is present, a simple parser can be used at the moment a model object (all types inheriting from Base are models) is constructed from a query result to translate the \"composition\" value from a formula into a Composition instance. For example, Acetyl is encoded with \"H(2) C(2) O\", which translates to <code>{\"H\": 2, \"C\": 2, \"O\": 1}</code>. This is also the case for <code>SpecificityToNeutralLoss</code>. However, <code>Brick</code>s are different, for whatever reason. Some bricks are just elements, in fact I think they're analogous to the elem component you parsed to build <code>self._massdata</code>. Other <code>Brick</code>s are molecules like acetate or monosaccharides. The definition of a Brick is not actually listed on Unimod's website, but it can be found in Proteowizard source code comments like <a data-is-external-link=\"true\" href=\"https://codecov.io/github/Bioconductor-mirror/mzR/src/pwiz/data/common/Unimod.cpp?ref=b6aa99c2b36dbf0b718c075093a1f8809cfae5b9#l-50\" rel=\"nofollow\">this</a> that they're used to compose formulae for modifications. Their elemental composition is encoded through a join-table, so instead of an event listener, a simple property decorator is easier than generating complicated SQL on load.</p>\n<p>I implemented the by_name and aliased it to by_title since there are now many more than two names, but there should be no ambiguity where the title of one modification is the name of another. To handle strictness, equality is handled as normal, and <code>contains</code> is emulated using an SQL <code>LIKE</code> operator with the query identifier padded with wildcards. <code>Unimod.mods</code> was simple, but, <code>mass_data</code> is harder because of the distinction between <code>Brick</code> and <code>Element</code>. The <code>Element</code> entries are unaware of specific isotopes, providing just monisotopic and average masses, while <code>Brick</code> versions of each element are particular to a specific isotope, but frequency information is missing. I can see you're doing something to back-solve the abundance of different isotopes using the average mass as a point of reference, but it's opaque. How important is that information?</p>", "type": "rendered"}, "created_on": "2015-11-01T19:54:31.053225+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 22985948}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/22985959.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-22985959"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Revised", "markup": "markdown", "html": "<p>Revised</p>", "type": "rendered"}, "created_on": "2015-11-01T19:55:36.654807+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 22985959}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/22985962.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-22985962"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Revised", "markup": "markdown", "html": "<p>Revised</p>", "type": "rendered"}, "created_on": "2015-11-01T19:55:52.836696+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 22985962}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23044895.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23044895"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "This is brilliant.\n\nI still need to check out what some of the models mean (like `Classification` and others) that I've never come across.\nAs far as `Modification` compositions go, I am happy with this solution, although I could not follow from your previous comment what the other two ways were.\nI noticed that the composition for `Modification` is sometimes elemental and sometimes made of bricks. Do you think that in the latter case it would make sense to calculate the composition by adding the elemental compositions of the bricks? I see that they are all available already.\n\nIs there anything else that needs to be added (except for no-arguments Unimod constructor behavior and some tests)?\nIt looks like this machinery deserves its own namespace, like `mass.unimod` or maybe just `unimod`, what do you think?\nI am also thinking about keeping the old class in place, not to force a new dependency on users happy with the way it is, and adding a deprecation warning.", "markup": "markdown", "html": "<p>This is brilliant.</p>\n<p>I still need to check out what some of the models mean (like <code>Classification</code> and others) that I've never come across.\nAs far as <code>Modification</code> compositions go, I am happy with this solution, although I could not follow from your previous comment what the other two ways were.\nI noticed that the composition for <code>Modification</code> is sometimes elemental and sometimes made of bricks. Do you think that in the latter case it would make sense to calculate the composition by adding the elemental compositions of the bricks? I see that they are all available already.</p>\n<p>Is there anything else that needs to be added (except for no-arguments Unimod constructor behavior and some tests)?\nIt looks like this machinery deserves its own namespace, like <code>mass.unimod</code> or maybe just <code>unimod</code>, what do you think?\nI am also thinking about keeping the old class in place, not to force a new dependency on users happy with the way it is, and adding a deprecation warning.</p>", "type": "rendered"}, "created_on": "2015-11-03T22:35:11.464954+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2015-11-03T22:35:45.148105+00:00", "type": "issue_comment", "id": 23044895}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23045744.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23045744"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "I was wondering where the brick-composition business would crop up. I even looked up an oligosaccharide modification and didn't see it there. Yes, tests and the no-argument constructor are definitely a good idea. Treating this as a submodule would make it easier to change it independently of the rest of the `mass` module.\n\nA lot of the power that we could use but aren't is in the Specificity. Right now, you have a function, parser.[isoforms](https://pythonhosted.org/pyteomics/api/parser.html#pyteomics.parser.isoforms) which let's the user completely specify all the rules for placing modifications in a dictionary. The Specificity can be translated into a rule for placing modifications. Early on in my first project in proteomics, I [wrote some Python classes](https://github.com/mobiusklein/glycresoft_sqlalchemy/blob/master/glycresoft_sqlalchemy/structure/modification.py#L157) for finding viable modification sites on a given peptide sequence. This code is old and needs to be restructured, but this is something that could be ported over or re-implemented with minimal agony. \n\nClassification might be useful for applications reasoning *about* how to include modifications in a search. For example you might ignore modifications which are from the `Isotopic label` class if you're not doing something with isotope labeling.\n\nSQLAlchemy is a very complicated machine, and I'll refrain from writing much using it's more \"magical\" features since they're liable to shoot me in the foot.\n\nI'll post a fix for the composition bit shortly.\n", "markup": "markdown", "html": "<p>I was wondering where the brick-composition business would crop up. I even looked up an oligosaccharide modification and didn't see it there. Yes, tests and the no-argument constructor are definitely a good idea. Treating this as a submodule would make it easier to change it independently of the rest of the <code>mass</code> module.</p>\n<p>A lot of the power that we could use but aren't is in the Specificity. Right now, you have a function, parser.<a data-is-external-link=\"true\" href=\"https://pythonhosted.org/pyteomics/api/parser.html#pyteomics.parser.isoforms\" rel=\"nofollow\">isoforms</a> which let's the user completely specify all the rules for placing modifications in a dictionary. The Specificity can be translated into a rule for placing modifications. Early on in my first project in proteomics, I <a data-is-external-link=\"true\" href=\"https://github.com/mobiusklein/glycresoft_sqlalchemy/blob/master/glycresoft_sqlalchemy/structure/modification.py#L157\" rel=\"nofollow\">wrote some Python classes</a> for finding viable modification sites on a given peptide sequence. This code is old and needs to be restructured, but this is something that could be ported over or re-implemented with minimal agony. </p>\n<p>Classification might be useful for applications reasoning <em>about</em> how to include modifications in a search. For example you might ignore modifications which are from the <code>Isotopic label</code> class if you're not doing something with isotope labeling.</p>\n<p>SQLAlchemy is a very complicated machine, and I'll refrain from writing much using it's more \"magical\" features since they're liable to shoot me in the foot.</p>\n<p>I'll post a fix for the composition bit shortly.</p>", "type": "rendered"}, "created_on": "2015-11-03T23:36:05.619511+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23045744}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23046636.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23046636"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-11-04T00:54:47.964650+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23046636}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23046668.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23046668"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "I'll write a few unit tests to cover the internals and the public API emulating the current Unimod object by next week. I'll show a few of the relational operations there to demonstrate how to use the underlying database.", "markup": "markdown", "html": "<p>I'll write a few unit tests to cover the internals and the public API emulating the current Unimod object by next week. I'll show a few of the relational operations there to demonstrate how to use the underlying database.</p>", "type": "rendered"}, "created_on": "2015-11-04T00:56:24.838459+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23046668}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23182439.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23182439"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "I've revised the models to include a bit more automatic composition loading in the `Fragment` class, and fixed a few more errors.\r\n\r\nThe test cases in the attached `tests.py` cover the main use cases, with 97% coverage.\r\n\r\nIf this is acceptable, should I make this a separate repository, fork and open a pull request?", "markup": "markdown", "html": "<p>I've revised the models to include a bit more automatic composition loading in the <code>Fragment</code> class, and fixed a few more errors.</p>\n<p>The test cases in the attached <code>tests.py</code> cover the main use cases, with 97% coverage.</p>\n<p>If this is acceptable, should I make this a separate repository, fork and open a pull request?</p>", "type": "rendered"}, "created_on": "2015-11-09T18:08:21.887406+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23182439}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23184097.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23184097"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Great!\n\nI can just add this to the repository and accept future changes via pull requests.", "markup": "markdown", "html": "<p>Great!</p>\n<p>I can just add this to the repository and accept future changes via pull requests.</p>", "type": "rendered"}, "created_on": "2015-11-09T19:27:19.236467+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 23184097}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23715136.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23715136"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Added in 20fe05f. Do you think structuring it like this is a good approach?\n```\npyteomics\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mass.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 unimod.py\n```\n\n`mass/__init__.py` star-imports from the old `mass.py` and also tries to import `unimod` (otherwise you can't access `mass.unimod` once you do `from pyteomics import mass`).\nI also had to tweak `setup.py` accordingly.\nI'm fine with changing this layout if needed.\n\nAlso, I get some deprecation warnings when running the tests:\n\n```\n/usr/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py:1366: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n  spec = inspect.getargspec(fn)\ntest_unimod.py:25: PendingDeprecationWarning: generator '__iter__' raised StopIteration\n  {alt for alt in mod.alternative_names})\n```\nAnd if I change the test case so that `setUpClass` says `cls.handle = unimod.Unimod('sqlite:///unimod.db')` instead of `cls.handle = unimod.Unimod()`, then I also see these warnings on Python 2.7:\n\n```\n/usr/lib/python2.7/site-packages/sqlalchemy/sql/sqltypes.py:185: SAWarning: Unicode type received non-unicode bind param value 'Amidated'. (this warning may be suppressed after 10 occurrences)\n  (util.ellipses_string(value),))\n/usr/lib/python2.7/site-packages/sqlalchemy/sql/sqltypes.py:185: SAWarning: Unicode type received non-unicode bind param value 'Deamidated'. (this warning may be suppressed after 10 occurrences)\n  (util.ellipses_string(value),))\n```\n\nDo you think anything needs to be done about these?\n\nFinal question, do you have any idea what I should put in the copyright notice in the new module?\n", "markup": "markdown", "html": "<p>Added in <a href=\"#!/levitsky/pyteomics/commits/20fe05f\" rel=\"nofollow\" class=\"ap-connect-link\">20fe05f</a>. Do you think structuring it like this is a good approach?</p>\n<div class=\"codehilite\"><pre><span></span>pyteomics\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mass.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 unimod.py\n</pre></div>\n\n\n<p><code>mass/__init__.py</code> star-imports from the old <code>mass.py</code> and also tries to import <code>unimod</code> (otherwise you can't access <code>mass.unimod</code> once you do <code>from pyteomics import mass</code>).\nI also had to tweak <code>setup.py</code> accordingly.\nI'm fine with changing this layout if needed.</p>\n<p>Also, I get some deprecation warnings when running the tests:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py:1366: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n  spec = inspect.getargspec(fn)\ntest_unimod.py:25: PendingDeprecationWarning: generator &#39;__iter__&#39; raised StopIteration\n  {alt for alt in mod.alternative_names})\n</pre></div>\n\n\n<p>And if I change the test case so that <code>setUpClass</code> says <code>cls.handle = unimod.Unimod('sqlite:///unimod.db')</code> instead of <code>cls.handle = unimod.Unimod()</code>, then I also see these warnings on Python 2.7:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/lib/python2.7/site-packages/sqlalchemy/sql/sqltypes.py:185: SAWarning: Unicode type received non-unicode bind param value &#39;Amidated&#39;. (this warning may be suppressed after 10 occurrences)\n  (util.ellipses_string(value),))\n/usr/lib/python2.7/site-packages/sqlalchemy/sql/sqltypes.py:185: SAWarning: Unicode type received non-unicode bind param value &#39;Deamidated&#39;. (this warning may be suppressed after 10 occurrences)\n  (util.ellipses_string(value),))\n</pre></div>\n\n\n<p>Do you think anything needs to be done about these?</p>\n<p>Final question, do you have any idea what I should put in the copyright notice in the new module?</p>", "type": "rendered"}, "created_on": "2015-12-01T13:56:02.875454+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 23715136}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23716394.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23716394"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "The first two deprecation warnings are internal to SQLAlchemy not yet updating for changes Python 3.5 introduced in preparation for future removal.\n\nThe latter two warnings are due to my using plain string literals in the unit test because the strings do not contain non-ASCII characters, and SQLAlchemy automatically casts byte strings to unicode strings when the mapping class definition says something is a unicode string. Since string literals in Python 3 are unicode strings, you won't see this message there. Adding the `u` prefix would remove those warnings if they're causing trouble. The reason you see these warnings when you use an existing database rather than creating one fresh from the source XML, is evidently because I don't know how to use the `warnings`  module. In the `load` function at line 627 invokes `warnings.simplefilter` to squash SAWarning messages since they fire a lot during the load process. I thought I had used a context manager but apparently not, so all such warnings are suppressed after calling `load`. Since Python 2's byte strings are just a codec over a raw byte buffer, casting them to unicode just enforces a particular codec on the buffer.\n\nAs for the package organization, it's a reasonable thing to do, particularly since it preserves backwards compatibility.", "markup": "markdown", "html": "<p>The first two deprecation warnings are internal to SQLAlchemy not yet updating for changes Python 3.5 introduced in preparation for future removal.</p>\n<p>The latter two warnings are due to my using plain string literals in the unit test because the strings do not contain non-ASCII characters, and SQLAlchemy automatically casts byte strings to unicode strings when the mapping class definition says something is a unicode string. Since string literals in Python 3 are unicode strings, you won't see this message there. Adding the <code>u</code> prefix would remove those warnings if they're causing trouble. The reason you see these warnings when you use an existing database rather than creating one fresh from the source XML, is evidently because I don't know how to use the <code>warnings</code>  module. In the <code>load</code> function at line 627 invokes <code>warnings.simplefilter</code> to squash SAWarning messages since they fire a lot during the load process. I thought I had used a context manager but apparently not, so all such warnings are suppressed after calling <code>load</code>. Since Python 2's byte strings are just a codec over a raw byte buffer, casting them to unicode just enforces a particular codec on the buffer.</p>\n<p>As for the package organization, it's a reasonable thing to do, particularly since it preserves backwards compatibility.</p>", "type": "rendered"}, "created_on": "2015-12-01T14:33:31.727899+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23716394}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23719503.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23719503"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "Puzzling. I don't see anything wrong with your use of the context manager.\nThere is an [old bug](http://bugs.python.org/issue4180) that produces a similar problem, but I don't quite see how it can be responsible for this.\nAlso, I don't see a global `__warningsregistry__` variable be set at all under 2.7.10.", "markup": "markdown", "html": "<p>Puzzling. I don't see anything wrong with your use of the context manager.\nThere is an <a data-is-external-link=\"true\" href=\"http://bugs.python.org/issue4180\" rel=\"nofollow\">old bug</a> that produces a similar problem, but I don't quite see how it can be responsible for this.\nAlso, I don't see a global <code>__warningsregistry__</code> variable be set at all under 2.7.10.</p>", "type": "rendered"}, "created_on": "2015-12-01T16:10:49.695649+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 23719503}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/23730067.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-23730067"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "I just remembered that last question about copyright. Naturally it is under\nthe same license as the rest of Pyteomics. As for attribution, we should\nshare authorship since this is derivative of your original Unimod interface.\n\nThe warning suppression issue is likely cosmetic, as unicode vs byte string\ninput does not matter as the underlying buffer is unchanged. The only time\nit matters is when reading out, during which time the RDBMS or ORM has\nalready enforced an encoding.", "markup": "markdown", "html": "<p>I just remembered that last question about copyright. Naturally it is under\nthe same license as the rest of Pyteomics. As for attribution, we should\nshare authorship since this is derivative of your original Unimod interface.</p>\n<p>The warning suppression issue is likely cosmetic, as unicode vs byte string\ninput does not matter as the underlying buffer is unchanged. The only time\nit matters is when reading out, during which time the RDBMS or ORM has\nalready enforced an encoding.</p>", "type": "rendered"}, "created_on": "2015-12-01T23:45:12.537590+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 23730067}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12/comments/25888272.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/12#comment-25888272"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/12.json"}}, "type": "issue", "id": 12, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Unimod Alternative Names Missing"}, "content": {"raw": "The Unimod module is live now, so this issue has been resolved", "markup": "markdown", "html": "<p>The Unimod module is live now, so this issue has been resolved</p>", "type": "rendered"}, "created_on": "2016-03-01T18:05:50.757257+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 25888272}], "page": 1, "size": 15}