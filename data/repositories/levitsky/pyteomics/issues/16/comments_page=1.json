{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16/comments/33605639.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/16#comment-33605639"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16.json"}}, "type": "issue", "id": 16, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Checking of string inclusivity in _get_info-related dictionaries of formats using base64 encoded data is dangerous"}, "content": {"raw": "On the other hand, we could just try to handle the exception since it is less computationally expensive than `isinstance` call, but it would make the logic a little more complicated to trace. Here's that approach:\n\n```python\nif 'binary' in info:\n            # Prepare for the unlikely scenario that this test\n            # is performed on a byte string in Python2\n            try:\n                types = {'32-bit float': 'f', '64-bit float': 'd'}\n                for t, code in types.items():\n                    if t in info:\n                        dtype = code\n                        del info[t]\n                        break\n                # sometimes it's under 'name'\n                else:\n                    if 'name' in info:\n                        for t, code in types.items():\n                            if t in info['name']:\n                                dtype = code\n                                info['name'].remove(t)\n                                break\n                compressed = True\n                if 'zlib compression' in info:\n                    del info['zlib compression']\n                elif 'name' in info and 'zlib compression' in info['name']:\n                    info['name'].remove('zlib compression')\n                else:\n                    compressed = False\n                    info.pop('no compression', None)\n                    try:\n                        info['name'].remove('no compression')\n                        if not info['name']: del info['name']\n                    except (KeyError, TypeError):\n                        pass\n                b = info.pop('binary')\n                if b:\n                    array = aux._decode_base64_data_array(b, dtype, compressed)\n                else:\n                    array = np.array([], dtype=dtype)\n                for k in info:\n                    if k.endswith(' array') and not info[k]:\n                        info = {k: self._convert_array(k, array)}\n                        break\n                else:\n                    found = False\n                    # workaround for #!/levitsky/pyteomics/issues/11\n                    if isinstance(info.get('name'), list):\n                        knames = info['name']\n                        for val in knames:\n                            if val.endswith(' array'):\n                                info = {val: self._convert_array(val, array)}\n                                found = True\n                                break\n                    # last fallback\n                    if not found:\n                        info['binary'] = self._convert_array(None, array)\n            except AttributeError:\n                if isinstance(info, dict):\n                    raise\n                else:\n                    pass\n```", "markup": "markdown", "html": "<p>On the other hand, we could just try to handle the exception since it is less computationally expensive than <code>isinstance</code> call, but it would make the logic a little more complicated to trace. Here's that approach:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"s1\">&#39;binary&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Prepare for the unlikely scenario that this test</span>\n            <span class=\"c1\"># is performed on a byte string in Python2</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;32-bit float&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;64-bit float&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">}</span>\n                <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n                        <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n                        <span class=\"k\">del</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span>\n                        <span class=\"k\">break</span>\n                <span class=\"c1\"># sometimes it&#39;s under &#39;name&#39;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"s1\">&#39;name&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                            <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]:</span>\n                                <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n                                <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n                                <span class=\"k\">break</span>\n                <span class=\"n\">compressed</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                <span class=\"k\">if</span> <span class=\"s1\">&#39;zlib compression&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n                    <span class=\"k\">del</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;zlib compression&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"s1\">&#39;name&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;zlib compression&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;zlib compression&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">compressed</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                    <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;no compression&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;no compression&#39;</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]:</span> <span class=\"k\">del</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n                        <span class=\"k\">pass</span>\n                <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n                    <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">aux</span><span class=\"o\">.</span><span class=\"n\">_decode_base64_data_array</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39; array&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]:</span>\n                        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_array</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">)}</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                    <span class=\"c1\"># workaround for #!/levitsky/pyteomics/issues/11</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">),</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                        <span class=\"n\">knames</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n                        <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">knames</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39; array&#39;</span><span class=\"p\">):</span>\n                                <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_array</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">)}</span>\n                                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                                <span class=\"k\">break</span>\n                    <span class=\"c1\"># last fallback</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n                        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_array</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                    <span class=\"k\">raise</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-01-12T17:11:28.684874+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 33605639}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16/comments/33613605.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/16#comment-33613605"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16.json"}}, "type": "issue", "id": 16, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Checking of string inclusivity in _get_info-related dictionaries of formats using base64 encoded data is dangerous"}, "content": {"raw": "First of all, this is amazing.\n\nSecond, I have a feeling that since `and` should short-circuit, `isinstance` will only be called when `'binary' in info` is true, so the first option should be faster.", "markup": "markdown", "html": "<p>First of all, this is amazing.</p>\n<p>Second, I have a feeling that since <code>and</code> should short-circuit, <code>isinstance</code> will only be called when <code>'binary' in info</code> is true, so the first option should be faster.</p>", "type": "rendered"}, "created_on": "2017-01-12T21:52:17.651783+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 33613605}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16/comments/33613854.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/16#comment-33613854"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16.json"}}, "type": "issue", "id": 16, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Checking of string inclusivity in _get_info-related dictionaries of formats using base64 encoded data is dangerous"}, "content": {"raw": "Yes, the conditional will short-circuit most of the time, but the try-except would less expensive: http://stackoverflow.com/a/1835844/1137920. Then again, here's the time breakdown to loop over a file with no actual processing for each scan:\n\n```\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    21322   47.704    0.002   47.704    0.002 {zlib.decompress}\n    21322   17.609    0.001   17.609    0.001 {binascii.a2b_base64}\n    21322   14.409    0.001   14.409    0.001 {method 'encode' of 'str' objects}\n    14249   13.017    0.001  123.122    0.009 xml.py:385(iterfind)\n155944/14248   11.134    0.000  108.205    0.008 xml.py:307(_get_info)\n155944/14248   10.324    0.000  108.338    0.008 mzml.py:83(_get_info_smart)\n```\nso either works, it's just a question of which one will our future selves understand when something else inevitably goes wrong. Then we just need to put the same construct around the `if \"binaryDataArray\"` and equivalent locations in `mzxml` (2-3 places, as the last place is a no-op as of this morning).\n\nI'll do the compound boolean in the if condition send in the pull request.", "markup": "markdown", "html": "<p>Yes, the conditional will short-circuit most of the time, but the try-except would less expensive: <a href=\"http://stackoverflow.com/a/1835844/1137920\" rel=\"nofollow\" class=\"ap-connect-link\">http://stackoverflow.com/a/1835844/1137920</a>. Then again, here's the time breakdown to loop over a file with no actual processing for each scan:</p>\n<div class=\"codehilite\"><pre><span></span>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    21322   47.704    0.002   47.704    0.002 {zlib.decompress}\n    21322   17.609    0.001   17.609    0.001 {binascii.a2b_base64}\n    21322   14.409    0.001   14.409    0.001 {method &#39;encode&#39; of &#39;str&#39; objects}\n    14249   13.017    0.001  123.122    0.009 xml.py:385(iterfind)\n155944/14248   11.134    0.000  108.205    0.008 xml.py:307(_get_info)\n155944/14248   10.324    0.000  108.338    0.008 mzml.py:83(_get_info_smart)\n</pre></div>\n\n\n<p>so either works, it's just a question of which one will our future selves understand when something else inevitably goes wrong. Then we just need to put the same construct around the <code>if \"binaryDataArray\"</code> and equivalent locations in <code>mzxml</code> (2-3 places, as the last place is a no-op as of this morning).</p>\n<p>I'll do the compound boolean in the if condition send in the pull request.</p>", "type": "rendered"}, "created_on": "2017-01-12T22:09:50.690978+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": null, "type": "issue_comment", "id": 33613854}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16/comments/33614237.json"}, "html": {"href": "#!/levitsky/pyteomics/issues/16#comment-33614237"}}, "issue": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/issues/16.json"}}, "type": "issue", "id": 16, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "title": "Checking of string inclusivity in _get_info-related dictionaries of formats using base64 encoded data is dangerous"}, "content": {"raw": "#!/levitsky/pyteomics/pull-requests/9", "markup": "markdown", "html": "<p><a href=\"#!/levitsky/pyteomics/pull-requests/9\" rel=\"nofollow\" class=\"ap-connect-link\">#!/levitsky/pyteomics/pull-requests/9</a></p>", "type": "rendered"}, "created_on": "2017-01-12T22:37:49.232530+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": null, "type": "issue_comment", "id": 33614237}], "page": 1, "size": 4}