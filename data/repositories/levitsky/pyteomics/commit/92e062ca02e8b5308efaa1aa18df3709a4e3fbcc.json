{"rendered": {"message": {"raw": "Redefined a generic line tokenizer to construct the byte offsets for any\ntype of XML file, regardless of white space.\n\n\nAdded an IndexedXML base class for later byte offset indexed XML file readers\nThis type supplies no new public methods, but redefines internally how :meth:`get_by_id`\nfunctions, using a fast look up when the id is in the offset index, and falling back to the\nnormal behavior when an index is not available.\n\nAdded an IndexedMzIdentML class inheriting from MzIdentML and IndexedXML. This class builds an\nIndex for a subset of the elements used by reference in the parsing process to speed up parsing.\n\nIn order to justify the process, I compared the performance of the IndexedMzIdentML parser with the\nbase MzIdentML parser with in-memory caching of lxml.Elements turned on, and speeds were comparable,\nbut with a 33% reduction in memory consumption. Tuning of the elements which are indexed could produce\nis replaced by an instance of an Indexed derived class.\nI believe that the current implementation passes all unit tests for existing features when the base parser", "markup": "markdown", "html": "<p>Redefined a generic line tokenizer to construct the byte offsets for any<br />\ntype of XML file, regardless of white space.</p>\n<p>Added an IndexedXML base class for later byte offset indexed XML file readers<br />\nThis type supplies no new public methods, but redefines internally how :meth:<code>get_by_id</code><br />\nfunctions, using a fast look up when the id is in the offset index, and falling back to the<br />\nnormal behavior when an index is not available.</p>\n<p>Added an IndexedMzIdentML class inheriting from MzIdentML and IndexedXML. This class builds an<br />\nIndex for a subset of the elements used by reference in the parsing process to speed up parsing.</p>\n<p>In order to justify the process, I compared the performance of the IndexedMzIdentML parser with the<br />\nbase MzIdentML parser with in-memory caching of lxml.Elements turned on, and speeds were comparable,<br />\nbut with a 33% reduction in memory consumption. Tuning of the elements which are indexed could produce<br />\nis replaced by an instance of an Indexed derived class.<br />\nI believe that the current implementation passes all unit tests for existing features when the base parser</p>", "type": "rendered"}}, "hash": "92e062ca02e8b5308efaa1aa18df3709a4e3fbcc", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/commit/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/patch/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc"}, "html": {"href": "#!/levitsky/pyteomics/commits/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/commit/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/commit/92e062ca02e8b5308efaa1aa18df3709a4e3fbcc/statuses_page=1.json"}}, "author": {"raw": "Joshua Klein <mobiusklein@gmail.com", "type": "author"}, "summary": {"raw": "Redefined a generic line tokenizer to construct the byte offsets for any\ntype of XML file, regardless of white space.\n\n\nAdded an IndexedXML base class for later byte offset indexed XML file readers\nThis type supplies no new public methods, but redefines internally how :meth:`get_by_id`\nfunctions, using a fast look up when the id is in the offset index, and falling back to the\nnormal behavior when an index is not available.\n\nAdded an IndexedMzIdentML class inheriting from MzIdentML and IndexedXML. This class builds an\nIndex for a subset of the elements used by reference in the parsing process to speed up parsing.\n\nIn order to justify the process, I compared the performance of the IndexedMzIdentML parser with the\nbase MzIdentML parser with in-memory caching of lxml.Elements turned on, and speeds were comparable,\nbut with a 33% reduction in memory consumption. Tuning of the elements which are indexed could produce\nis replaced by an instance of an Indexed derived class.\nI believe that the current implementation passes all unit tests for existing features when the base parser", "markup": "markdown", "html": "<p>Redefined a generic line tokenizer to construct the byte offsets for any<br />\ntype of XML file, regardless of white space.</p>\n<p>Added an IndexedXML base class for later byte offset indexed XML file readers<br />\nThis type supplies no new public methods, but redefines internally how :meth:<code>get_by_id</code><br />\nfunctions, using a fast look up when the id is in the offset index, and falling back to the<br />\nnormal behavior when an index is not available.</p>\n<p>Added an IndexedMzIdentML class inheriting from MzIdentML and IndexedXML. This class builds an<br />\nIndex for a subset of the elements used by reference in the parsing process to speed up parsing.</p>\n<p>In order to justify the process, I compared the performance of the IndexedMzIdentML parser with the<br />\nbase MzIdentML parser with in-memory caching of lxml.Elements turned on, and speeds were comparable,<br />\nbut with a 33% reduction in memory consumption. Tuning of the elements which are indexed could produce<br />\nis replaced by an instance of an Indexed derived class.<br />\nI believe that the current implementation passes all unit tests for existing features when the base parser</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "462ef58671ac01647baff6eebefa782d042ea91d", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/462ef58671ac01647baff6eebefa782d042ea91d.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/462ef58671ac01647baff6eebefa782d042ea91d"}}}], "date": "2016-04-20T18:47:31+00:00", "message": "Redefined a generic line tokenizer to construct the byte offsets for any\ntype of XML file, regardless of white space.\n\n\nAdded an IndexedXML base class for later byte offset indexed XML file readers\nThis type supplies no new public methods, but redefines internally how :meth:`get_by_id`\nfunctions, using a fast look up when the id is in the offset index, and falling back to the\nnormal behavior when an index is not available.\n\nAdded an IndexedMzIdentML class inheriting from MzIdentML and IndexedXML. This class builds an\nIndex for a subset of the elements used by reference in the parsing process to speed up parsing.\n\nIn order to justify the process, I compared the performance of the IndexedMzIdentML parser with the\nbase MzIdentML parser with in-memory caching of lxml.Elements turned on, and speeds were comparable,\nbut with a 33% reduction in memory consumption. Tuning of the elements which are indexed could produce\nis replaced by an instance of an Indexed derived class.\nI believe that the current implementation passes all unit tests for existing features when the base parser", "type": "commit", "git_hash": "7e763b66330cc1b144825d2f11be9b1a66e6e45a", "tags": null, "branches": "default"}