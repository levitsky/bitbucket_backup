{"rendered": {"message": {"raw": "feature: added new interface for delaying decoding of base64 binary arrays\n\n* Added a new mixin class in auxiliay, BinaryDataArrayTransformer\n  which encapsulates the process of converting a base64 bytestring\n  into a numpy array.\n  - If decoding is done immediately, the functionality is essentially\n    identical to previous implementation.\n  - If decoding is off (decode_binary=False), instead of discarding the\n    base64 bytestring and the associated compression information, it\n    creates a namedtuple which records the bytestring, the compression\n    type and the dtype of the encoded array, with a method to decode the\n    array later.\n  - Adapted the decompression process to permit more than just zlib compression,\n    supporting the addition of future decompressor implementations.\n* Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\n  which splices the class into the inheritance hierarchy for mzml.MzML and\n  mzxml.MzXML.\n* Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\n  the single call aux._decode_base64_data_array.\n  - Altered MzML._determine_compression to recover the compression\n    type as a string instead of as a boolean without information about which\n    compression method was used.\n  - Altered MzML._handle_binary to use decode_data_array when decoding arrays\n    and _make_record when not.\n* Modified mzxml.MzXML to use the new API as in mzml.MzML.", "markup": "markdown", "html": "<p>feature: added new interface for delaying decoding of base64 binary arrays</p>\n<ul>\n<li>Added a new mixin class in auxiliay, BinaryDataArrayTransformer<br />\n  which encapsulates the process of converting a base64 bytestring<br />\n  into a numpy array.</li>\n<li>If decoding is done immediately, the functionality is essentially<br />\n    identical to previous implementation.</li>\n<li>If decoding is off (decode_binary=False), instead of discarding the<br />\n    base64 bytestring and the associated compression information, it<br />\n    creates a namedtuple which records the bytestring, the compression<br />\n    type and the dtype of the encoded array, with a method to decode the<br />\n    array later.</li>\n<li>Adapted the decompression process to permit more than just zlib compression,<br />\n    supporting the addition of future decompressor implementations.</li>\n<li>Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer<br />\n  which splices the class into the inheritance hierarchy for mzml.MzML and<br />\n  mzxml.MzXML.</li>\n<li>Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of<br />\n  the single call aux._decode_base64_data_array.</li>\n<li>Altered MzML._determine_compression to recover the compression<br />\n    type as a string instead of as a boolean without information about which<br />\n    compression method was used.</li>\n<li>Altered MzML._handle_binary to use decode_data_array when decoding arrays<br />\n    and _make_record when not.</li>\n<li>Modified mzxml.MzXML to use the new API as in mzml.MzML.</li>\n</ul>", "type": "rendered"}}, "hash": "f3a1ace3e28361f7e37ab8406ebc5870738a21a2", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/f3a1ace3e28361f7e37ab8406ebc5870738a21a2.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/commit/f3a1ace3e28361f7e37ab8406ebc5870738a21a2/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/patch/f3a1ace3e28361f7e37ab8406ebc5870738a21a2"}, "html": {"href": "#!/levitsky/pyteomics/commits/f3a1ace3e28361f7e37ab8406ebc5870738a21a2"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/f3a1ace3e28361f7e37ab8406ebc5870738a21a2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/commit/f3a1ace3e28361f7e37ab8406ebc5870738a21a2/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/commit/f3a1ace3e28361f7e37ab8406ebc5870738a21a2/statuses_page=1.json"}}, "author": {"raw": "Joshua Klein <mobiusklein@gmail.com>", "type": "author", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}, "summary": {"raw": "feature: added new interface for delaying decoding of base64 binary arrays\n\n* Added a new mixin class in auxiliay, BinaryDataArrayTransformer\n  which encapsulates the process of converting a base64 bytestring\n  into a numpy array.\n  - If decoding is done immediately, the functionality is essentially\n    identical to previous implementation.\n  - If decoding is off (decode_binary=False), instead of discarding the\n    base64 bytestring and the associated compression information, it\n    creates a namedtuple which records the bytestring, the compression\n    type and the dtype of the encoded array, with a method to decode the\n    array later.\n  - Adapted the decompression process to permit more than just zlib compression,\n    supporting the addition of future decompressor implementations.\n* Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\n  which splices the class into the inheritance hierarchy for mzml.MzML and\n  mzxml.MzXML.\n* Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\n  the single call aux._decode_base64_data_array.\n  - Altered MzML._determine_compression to recover the compression\n    type as a string instead of as a boolean without information about which\n    compression method was used.\n  - Altered MzML._handle_binary to use decode_data_array when decoding arrays\n    and _make_record when not.\n* Modified mzxml.MzXML to use the new API as in mzml.MzML.", "markup": "markdown", "html": "<p>feature: added new interface for delaying decoding of base64 binary arrays</p>\n<ul>\n<li>Added a new mixin class in auxiliay, BinaryDataArrayTransformer<br />\n  which encapsulates the process of converting a base64 bytestring<br />\n  into a numpy array.</li>\n<li>If decoding is done immediately, the functionality is essentially<br />\n    identical to previous implementation.</li>\n<li>If decoding is off (decode_binary=False), instead of discarding the<br />\n    base64 bytestring and the associated compression information, it<br />\n    creates a namedtuple which records the bytestring, the compression<br />\n    type and the dtype of the encoded array, with a method to decode the<br />\n    array later.</li>\n<li>Adapted the decompression process to permit more than just zlib compression,<br />\n    supporting the addition of future decompressor implementations.</li>\n<li>Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer<br />\n  which splices the class into the inheritance hierarchy for mzml.MzML and<br />\n  mzxml.MzXML.</li>\n<li>Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of<br />\n  the single call aux._decode_base64_data_array.</li>\n<li>Altered MzML._determine_compression to recover the compression<br />\n    type as a string instead of as a boolean without information about which<br />\n    compression method was used.</li>\n<li>Altered MzML._handle_binary to use decode_data_array when decoding arrays<br />\n    and _make_record when not.</li>\n<li>Modified mzxml.MzXML to use the new API as in mzml.MzML.</li>\n</ul>", "type": "rendered"}, "participants": [], "parents": [{"hash": "0ae4b3284226b0d14eae67d5843da2e59965ceea", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/0ae4b3284226b0d14eae67d5843da2e59965ceea.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/0ae4b3284226b0d14eae67d5843da2e59965ceea"}}}], "date": "2017-12-10T15:40:47+00:00", "message": "feature: added new interface for delaying decoding of base64 binary arrays\n\n* Added a new mixin class in auxiliay, BinaryDataArrayTransformer\n  which encapsulates the process of converting a base64 bytestring\n  into a numpy array.\n  - If decoding is done immediately, the functionality is essentially\n    identical to previous implementation.\n  - If decoding is off (decode_binary=False), instead of discarding the\n    base64 bytestring and the associated compression information, it\n    creates a namedtuple which records the bytestring, the compression\n    type and the dtype of the encoded array, with a method to decode the\n    array later.\n  - Adapted the decompression process to permit more than just zlib compression,\n    supporting the addition of future decompressor implementations.\n* Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\n  which splices the class into the inheritance hierarchy for mzml.MzML and\n  mzxml.MzXML.\n* Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\n  the single call aux._decode_base64_data_array.\n  - Altered MzML._determine_compression to recover the compression\n    type as a string instead of as a boolean without information about which\n    compression method was used.\n  - Altered MzML._handle_binary to use decode_data_array when decoding arrays\n    and _make_record when not.\n* Modified mzxml.MzXML to use the new API as in mzml.MzML.", "type": "commit", "git_hash": "d6da254a7856754ae903db840b8906d88d0c80b0", "tags": null, "branches": "compression_factoring"}