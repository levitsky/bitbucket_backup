{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/comments/30038869.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11/_/diff#comment-30038869"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}, "content": {"raw": "And you have now officially authored more than half of all PR's to pyteomics. Thank you for all the work you're doing.", "markup": "markdown", "html": "<p>And you have now officially authored more than half of all PR's to pyteomics. Thank you for all the work you're doing.</p>", "type": "rendered"}, "created_on": "2017-01-19T21:43:36.983100+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2017-01-19T21:43:36.985016+00:00", "type": "pullrequest_comment", "id": 30038869}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}, {"update": {"description": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "title": "Default", "destination": {"commit": {"hash": "e665cb024cac", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/e665cb024cac.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/e665cb024cac"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3a8783827c0e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/3a8783827c0e"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/3a8783827c0e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "state": "MERGED", "author": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "date": "2017-01-19T21:41:37.319053+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/comments/30038387.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11/_/diff#comment-30038387"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}, "content": {"raw": "That is indeed the complete list of standardized array types as of the PSI-MS vocabulary definition downloaded from http://psidev.cvs.sourceforge.net/*checkout*/psidev/psi/psi-ms/mzML/controlledVocabulary/psi-ms.obo as of about a week ago. It may change in the future, in which case redownloading that file and parsing it is necessary. I've got that machinery still baking in https://github.com/mobiusklein/psims where I'm still fixing bugs and deciding on the right policy about whether to vendorize that .obo or not. When it's more stable, I'm planning on submitting it for review to be added to `pyteomics`, as I've mentioned in the past.\n\nThis pull request is actually to support a working prototype that validates as mzML with multiple non-standard data arrays, necessitating this fix.", "markup": "markdown", "html": "<p>That is indeed the complete list of standardized array types as of the PSI-MS vocabulary definition downloaded from <a href=\"http://psidev.cvs.sourceforge.net/\" rel=\"nofollow\" class=\"ap-connect-link\">http://psidev.cvs.sourceforge.net/</a><em>checkout</em>/psidev/psi/psi-ms/mzML/controlledVocabulary/psi-ms.obo as of about a week ago. It may change in the future, in which case redownloading that file and parsing it is necessary. I've got that machinery still baking in <a href=\"https://github.com/mobiusklein/psims\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/mobiusklein/psims</a> where I'm still fixing bugs and deciding on the right policy about whether to vendorize that .obo or not. When it's more stable, I'm planning on submitting it for review to be added to <code>pyteomics</code>, as I've mentioned in the past.</p>\n<p>This pull request is actually to support a working prototype that validates as mzML with multiple non-standard data arrays, necessitating this fix.</p>", "type": "rendered"}, "created_on": "2017-01-19T21:33:20.927942+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2017-01-19T21:33:20.998437+00:00", "type": "pullrequest_comment", "id": 30038387}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/comments/30038114.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11/_/diff#comment-30038114"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}, "content": {"raw": "Looks good. Is this the complete list of array keys (or is there one?)", "markup": "markdown", "html": "<p>Looks good. Is this the complete list of array keys (or is there one?)</p>", "type": "rendered"}, "created_on": "2017-01-19T21:27:26.080824+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2017-01-19T21:27:26.083311+00:00", "type": "pullrequest_comment", "id": 30038114}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}, {"update": {"description": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "title": "Default", "destination": {"commit": {"hash": "e665cb024cac", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/e665cb024cac.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/e665cb024cac"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3a8783827c0e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/3a8783827c0e"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/3a8783827c0e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2017-01-19T20:30:57.900489+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}, {"update": {"description": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "title": "Default", "destination": {"commit": {"hash": "e665cb024cac", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/e665cb024cac.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/e665cb024cac"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3a8783827c0e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/3a8783827c0e"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/3a8783827c0e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2017-01-19T20:30:57.873518+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}}, "title": "Default"}}]}