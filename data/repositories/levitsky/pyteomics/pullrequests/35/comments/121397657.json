{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121397657.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121397657"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "That\u2019s what I get for putting the patch together in an hour.\n\nIt seems `str` has the same proscription in Py2 that `int` has in Py3. I\u2019ll put a version check on it before declaring `__slots__`\n\nI didn\u2019t think I had committed the interning stuff because I couldn\u2019t decide whether I should use Python\u2019s builtin `str` interning machinery \\(and eat the 100x slowdown when the value isn\u2019t a `str`\\) or if I should put another interning `dict` in the `auxiliary` namespace without discussing it.\n\n`intern`  takes a `PyStringObject` object and checks if it is in a global `dict`, mapping the string to itself, and if it is present, returns the value in the `dict`, discarding the provided \\(redundant\\) string object, and if it isn\u2019t present, places the string in the `dict`, keeping the string alive for future calls to `intern` to return. This prevents you from having multiple distinct strings with the same value, saving space. We can do the same thing here, but with any hashable object.", "markup": "markdown", "html": "<p>That\u2019s what I get for putting the patch together in an hour.</p>\n<p>It seems <code>str</code> has the same proscription in Py2 that <code>int</code> has in Py3. I\u2019ll put a version check on it before declaring <code>__slots__</code></p>\n<p>I didn\u2019t think I had committed the interning stuff because I couldn\u2019t decide whether I should use Python\u2019s builtin <code>str</code> interning machinery (and eat the 100x slowdown when the value isn\u2019t a <code>str</code>) or if I should put another interning <code>dict</code> in the <code>auxiliary</code> namespace without discussing it.</p>\n<p><code>intern</code>  takes a <code>PyStringObject</code> object and checks if it is in a global <code>dict</code>, mapping the string to itself, and if it is present, returns the value in the <code>dict</code>, discarding the provided (redundant) string object, and if it isn\u2019t present, places the string in the <code>dict</code>, keeping the string alive for future calls to <code>intern</code> to return. This prevents you from having multiple distinct strings with the same value, saving space. We can do the same thing here, but with any hashable object.</p>", "type": "rendered"}, "created_on": "2019-10-19T01:40:41.168540+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-10-19T01:40:41.374743+00:00", "type": "pullrequest_comment", "id": 121397657}