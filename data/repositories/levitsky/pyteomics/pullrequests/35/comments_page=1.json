{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121328626.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121328626"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "Thank you.\n\nI am currently getting the following error on import in Python 2:\n\n\u200c\n\n```python\n>>> from pyteomics.auxiliary import unitstr\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/lev/venv/pyteomics2/lib/python2.7/site-packages/pyteomics/auxiliary/__init__.py\", line 8, in <module>\n    from .structures import (\n  File \"/home/lev/venv/pyteomics2/lib/python2.7/site-packages/pyteomics/auxiliary/structures.py\", line 263, in <module>\n    class unitstr(str):\nTypeError: Error when calling the metaclass bases\n    nonempty __slots__ not supported for subtype of 'str'\n```\n\nI also get a bunch of prints on Python 3 when reading e.g.  mzML scans:\n\n`None intern() argument 1 must be str, not None`\n\napparently coming from `_try_intern`", "markup": "markdown", "html": "<p>Thank you.</p>\n<p>I am currently getting the following error on import in Python 2:</p>\n<p>\u200c</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyteomics.auxiliary</span> <span class=\"kn\">import</span> <span class=\"n\">unitstr</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;&lt;stdin&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lev/venv/pyteomics2/lib/python2.7/site-packages/pyteomics/auxiliary/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">.structures</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/lev/venv/pyteomics2/lib/python2.7/site-packages/pyteomics/auxiliary/structures.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">263</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"k\">class</span> <span class=\"nc\">unitstr</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"n\">when</span> <span class=\"n\">calling</span> <span class=\"n\">the</span> <span class=\"n\">metaclass</span> <span class=\"n\">bases</span>\n    <span class=\"n\">nonempty</span> <span class=\"vm\">__slots__</span> <span class=\"ow\">not</span> <span class=\"n\">supported</span> <span class=\"k\">for</span> <span class=\"n\">subtype</span> <span class=\"n\">of</span> <span class=\"s1\">&#39;str&#39;</span>\n</pre></div>\n\n\n<p>I also get a bunch of prints on Python 3 when reading e.g.  mzML scans:</p>\n<p><code>None intern() argument 1 must be str, not None</code></p>\n<p>apparently coming from <code>_try_intern</code></p>", "type": "rendered"}, "created_on": "2019-10-18T13:26:02.201195+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-10-18T13:26:02.206393+00:00", "type": "pullrequest_comment", "id": 121328626}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121397657.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121397657"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "That\u2019s what I get for putting the patch together in an hour.\n\nIt seems `str` has the same proscription in Py2 that `int` has in Py3. I\u2019ll put a version check on it before declaring `__slots__`\n\nI didn\u2019t think I had committed the interning stuff because I couldn\u2019t decide whether I should use Python\u2019s builtin `str` interning machinery \\(and eat the 100x slowdown when the value isn\u2019t a `str`\\) or if I should put another interning `dict` in the `auxiliary` namespace without discussing it.\n\n`intern`  takes a `PyStringObject` object and checks if it is in a global `dict`, mapping the string to itself, and if it is present, returns the value in the `dict`, discarding the provided \\(redundant\\) string object, and if it isn\u2019t present, places the string in the `dict`, keeping the string alive for future calls to `intern` to return. This prevents you from having multiple distinct strings with the same value, saving space. We can do the same thing here, but with any hashable object.", "markup": "markdown", "html": "<p>That\u2019s what I get for putting the patch together in an hour.</p>\n<p>It seems <code>str</code> has the same proscription in Py2 that <code>int</code> has in Py3. I\u2019ll put a version check on it before declaring <code>__slots__</code></p>\n<p>I didn\u2019t think I had committed the interning stuff because I couldn\u2019t decide whether I should use Python\u2019s builtin <code>str</code> interning machinery (and eat the 100x slowdown when the value isn\u2019t a <code>str</code>) or if I should put another interning <code>dict</code> in the <code>auxiliary</code> namespace without discussing it.</p>\n<p><code>intern</code>  takes a <code>PyStringObject</code> object and checks if it is in a global <code>dict</code>, mapping the string to itself, and if it is present, returns the value in the <code>dict</code>, discarding the provided (redundant) string object, and if it isn\u2019t present, places the string in the <code>dict</code>, keeping the string alive for future calls to <code>intern</code> to return. This prevents you from having multiple distinct strings with the same value, saving space. We can do the same thing here, but with any hashable object.</p>", "type": "rendered"}, "created_on": "2019-10-19T01:40:41.168540+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-10-19T01:40:41.374743+00:00", "type": "pullrequest_comment", "id": 121397657}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121402810.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121402810"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "Thanks again, I see no issues now. I do see 20-40% increase in construction time for `unitstr` and `cvstr`, which is probably expected, but I think I also see an approximately 10-15% slowdown on mzML parsing. I\u2019ll try looking into it more closely.", "markup": "markdown", "html": "<p>Thanks again, I see no issues now. I do see 20-40% increase in construction time for <code>unitstr</code> and <code>cvstr</code>, which is probably expected, but I think I also see an approximately 10-15% slowdown on mzML parsing. I\u2019ll try looking into it more closely.</p>", "type": "rendered"}, "created_on": "2019-10-19T12:19:29.588360+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-10-19T12:19:29.592972+00:00", "type": "pullrequest_comment", "id": 121402810}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121403502.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121403502"}}, "parent": {"id": 121402810, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121402810.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121402810"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "The string types might be slower because of the extra hashing on\nconstruction, and cvstr are so common that the performance difference adds\nup. I think an alternative might be to cache the whole instance rather than\njust the extra attributes. I will take some measurements too.", "markup": "markdown", "html": "<p>The string types might be slower because of the extra hashing on\nconstruction, and cvstr are so common that the performance difference adds\nup. I think an alternative might be to cache the whole instance rather than\njust the extra attributes. I will take some measurements too.</p>", "type": "rendered"}, "created_on": "2019-10-19T13:20:12.657137+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-10-19T13:20:15.721497+00:00", "type": "pullrequest_comment", "id": 121403502}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121405321.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121405321"}}, "parent": {"id": 121402810, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121402810.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121402810"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "It looks like the interning operation is almost more expensive than the construction of `cvstr`. Caching the whole instance looks to be enough to recover performance there. Removing interning of unit names on `unitfloat` also helps keep their runtime cost down, though it does mean they are slightly more space expensive, but the main space savings is already achieved by getting rid of their instance `dict` so that\u2019s not a big deal.", "markup": "markdown", "html": "<p>It looks like the interning operation is almost more expensive than the construction of <code>cvstr</code>. Caching the whole instance looks to be enough to recover performance there. Removing interning of unit names on <code>unitfloat</code> also helps keep their runtime cost down, though it does mean they are slightly more space expensive, but the main space savings is already achieved by getting rid of their instance <code>dict</code> so that\u2019s not a big deal.</p>", "type": "rendered"}, "created_on": "2019-10-19T15:51:52.301858+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-10-19T15:51:52.644002+00:00", "type": "pullrequest_comment", "id": 121405321}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121408539.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121408539"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "Now I\u2019m getting somewhat conflicting results when parsing a test mzML file. Simply trying to timeit the iteration over the whole file still gets me a 10% slowdown compared to default, but when profiling it I get the opposite result.\n\n\u200c", "markup": "markdown", "html": "<p>Now I\u2019m getting somewhat conflicting results when parsing a test mzML file. Simply trying to timeit the iteration over the whole file still gets me a 10% slowdown compared to default, but when profiling it I get the opposite result.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-10-19T23:10:30.755522+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-10-19T23:11:03.838682+00:00", "type": "pullrequest_comment", "id": 121408539}, {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121408652.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121408652"}}, "parent": {"id": 121408539, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35/comments/121408539.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35/_/diff#comment-121408539"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/35.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/35"}}, "title": "Unit primitive slots"}, "content": {"raw": "Disregard that, could not reproduce my own results. Parsing speed seems to be the same.", "markup": "markdown", "html": "<p>Disregard that, could not reproduce my own results. Parsing speed seems to be the same.</p>", "type": "rendered"}, "created_on": "2019-10-19T23:36:51.160269+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-10-19T23:36:51.168491+00:00", "type": "pullrequest_comment", "id": 121408652}], "page": 1, "size": 7}