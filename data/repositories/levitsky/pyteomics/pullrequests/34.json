{"rendered": {"description": {"raw": "The default charge parser was written to defend against poorly formatted, ambiguous charge states from the bad old days of low resolution instruments. However, regexes are slow compared to exact string operations, and when the you don't need to handle the ambiguity it can be the slowest part of parsing. This patch allows you to override the charge parser function through inheritance rather than by monkeypatching `pyteomics.mgf.aux._parse_charge` globally.\r\n\r\nThe new tests for the index saving process for MGF broke on Windows because of newline conversion \\(\\\\n -> \\\\n\\\\r\\), resulting in incorrect offsets. Opening the files in binary mode ensures that the original line endings are preserved. The types of the reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists do not equal tuples even if their contents are the same?\r\n\r\nLastly, PyteomicsError was defined to take only one argument, the error message but pylint observed it was called with an additional parameter occaisionally. While the error would result from invalid user code rather than library code, allowing it to take additional arguments satisfied the static code checker.", "markup": "markdown", "html": "<p>The default charge parser was written to defend against poorly formatted, ambiguous charge states from the bad old days of low resolution instruments. However, regexes are slow compared to exact string operations, and when the you don't need to handle the ambiguity it can be the slowest part of parsing. This patch allows you to override the charge parser function through inheritance rather than by monkeypatching <code>pyteomics.mgf.aux._parse_charge</code> globally.</p>\n<p>The new tests for the index saving process for MGF broke on Windows because of newline conversion (\\n -&gt; \\n\\r), resulting in incorrect offsets. Opening the files in binary mode ensures that the original line endings are preserved. The types of the reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists do not equal tuples even if their contents are the same?</p>\n<p>Lastly, PyteomicsError was defined to take only one argument, the error message but pylint observed it was called with an additional parameter occaisionally. While the error would result from invalid user code rather than library code, allowing it to take additional arguments satisfied the static code checker.</p>", "type": "rendered"}, "title": {"raw": "feature:Make the charge parser used by MGFBase overrideable by inheritance", "markup": "markdown", "html": "<p>feature:Make the charge parser used by MGFBase overrideable by inheritance</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The default charge parser was written to defend against poorly formatted, ambiguous charge states from the bad old days of low resolution instruments. However, regexes are slow compared to exact string operations, and when the you don't need to handle the ambiguity it can be the slowest part of parsing. This patch allows you to override the charge parser function through inheritance rather than by monkeypatching `pyteomics.mgf.aux._parse_charge` globally.\r\n\r\nThe new tests for the index saving process for MGF broke on Windows because of newline conversion \\(\\\\n -> \\\\n\\\\r\\), resulting in incorrect offsets. Opening the files in binary mode ensures that the original line endings are preserved. The types of the reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists do not equal tuples even if their contents are the same?\r\n\r\nLastly, PyteomicsError was defined to take only one argument, the error message but pylint observed it was called with an additional parameter occaisionally. While the error would result from invalid user code rather than library code, allowing it to take additional arguments satisfied the static code checker.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/34/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diffstat/levitsky/pyteomics:82c125a24959%0D6b5eac1e4360?from_pullrequest_id=34"}, "commits": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34/commits.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/34/merge"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/34"}, "activity": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/levitsky/pyteomics:82c125a24959%0D6b5eac1e4360?from_pullrequest_id=34"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/34/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34/statuses_page=1.json"}}, "title": "feature:Make the charge parser used by MGFBase overrideable by inheritance", "close_source_branch": false, "reviewers": [{"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}], "id": 34, "destination": {"commit": {"hash": "6b5eac1e4360", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/6b5eac1e4360.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/6b5eac1e4360"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "created_on": "2019-03-12T02:18:30.711590+00:00", "summary": {"raw": "The default charge parser was written to defend against poorly formatted, ambiguous charge states from the bad old days of low resolution instruments. However, regexes are slow compared to exact string operations, and when the you don't need to handle the ambiguity it can be the slowest part of parsing. This patch allows you to override the charge parser function through inheritance rather than by monkeypatching `pyteomics.mgf.aux._parse_charge` globally.\r\n\r\nThe new tests for the index saving process for MGF broke on Windows because of newline conversion \\(\\\\n -> \\\\n\\\\r\\), resulting in incorrect offsets. Opening the files in binary mode ensures that the original line endings are preserved. The types of the reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists do not equal tuples even if their contents are the same?\r\n\r\nLastly, PyteomicsError was defined to take only one argument, the error message but pylint observed it was called with an additional parameter occaisionally. While the error would result from invalid user code rather than library code, allowing it to take additional arguments satisfied the static code checker.", "markup": "markdown", "html": "<p>The default charge parser was written to defend against poorly formatted, ambiguous charge states from the bad old days of low resolution instruments. However, regexes are slow compared to exact string operations, and when the you don't need to handle the ambiguity it can be the slowest part of parsing. This patch allows you to override the charge parser function through inheritance rather than by monkeypatching <code>pyteomics.mgf.aux._parse_charge</code> globally.</p>\n<p>The new tests for the index saving process for MGF broke on Windows because of newline conversion (\\n -&gt; \\n\\r), resulting in incorrect offsets. Opening the files in binary mode ensures that the original line endings are preserved. The types of the reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists do not equal tuples even if their contents are the same?</p>\n<p>Lastly, PyteomicsError was defined to take only one argument, the error message but pylint observed it was called with an additional parameter occaisionally. While the error would result from invalid user code rather than library code, allowing it to take additional arguments satisfied the static code checker.</p>", "type": "rendered"}, "source": {"commit": {"hash": "82c125a24959", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/82c125a24959"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/82c125a24959"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-03-12T15:40:03.716706+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}], "reason": "", "updated_on": "2019-03-12T15:40:03.729346+00:00", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "merge_commit": {"hash": "82c125a24959", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/82c125a24959.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/82c125a24959"}}}, "closed_by": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}