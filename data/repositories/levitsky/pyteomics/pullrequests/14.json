{"rendered": {"description": {"raw": "* feature: added new interface for delaying decoding of base64 binary arrays\r\n\r\n    * Added a new mixin class in auxiliary, BinaryDataArrayTransformer\r\n      which encapsulates the process of converting a base64 bytestring\r\n      into a numpy array.\r\n      - If decoding is done immediately, the functionality is essentially\r\n        identical to previous implementation.\r\n      - If decoding is off (decode_binary=False), instead of discarding the\r\n        base64 bytestring and the associated compression information, it\r\n        creates a namedtuple which records the bytestring, the compression\r\n        type and the dtype of the encoded array, with a method to decode the\r\n        array later.\r\n      - Adapted the decompression process to permit more than just zlib compression,\r\n        supporting the addition of future decompressor implementations.\r\n    * Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\r\n      which splices the class into the inheritance hierarchy for mzml.MzML and\r\n      mzxml.MzXML.\r\n    * Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\r\n      the single call aux._decode_base64_data_array.\r\n      - Altered MzML._determine_compression to recover the compression\r\n        type as a string instead of as a boolean without information about which\r\n        compression method was used.\r\n      - Altered MzML._handle_binary to use decode_data_array when decoding arrays\r\n        and _make_record when not.\r\n    * Modified mzxml.MzXML to use the new API as in mzml.MzML.\r\n\r\n* documentation: document aux.BinaryDataArrayTransformer", "markup": "markdown", "html": "<ul>\n<li>\n<p>feature: added new interface for delaying decoding of base64 binary arrays</p>\n<ul>\n<li>Added a new mixin class in auxiliary, BinaryDataArrayTransformer\n  which encapsulates the process of converting a base64 bytestring\n  into a numpy array.</li>\n<li>If decoding is done immediately, the functionality is essentially\n    identical to previous implementation.</li>\n<li>If decoding is off (decode_binary=False), instead of discarding the\n    base64 bytestring and the associated compression information, it\n    creates a namedtuple which records the bytestring, the compression\n    type and the dtype of the encoded array, with a method to decode the\n    array later.</li>\n<li>Adapted the decompression process to permit more than just zlib compression,\n    supporting the addition of future decompressor implementations.</li>\n<li>Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\n  which splices the class into the inheritance hierarchy for mzml.MzML and\n  mzxml.MzXML.</li>\n<li>Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\n  the single call aux._decode_base64_data_array.</li>\n<li>Altered MzML._determine_compression to recover the compression\n    type as a string instead of as a boolean without information about which\n    compression method was used.</li>\n<li>Altered MzML._handle_binary to use decode_data_array when decoding arrays\n    and _make_record when not.</li>\n<li>Modified mzxml.MzXML to use the new API as in mzml.MzML.</li>\n</ul>\n</li>\n<li>\n<p>documentation: document aux.BinaryDataArrayTransformer</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Compression factoring", "markup": "markdown", "html": "<p>Compression factoring</p>", "type": "rendered"}}, "type": "pullrequest", "description": "* feature: added new interface for delaying decoding of base64 binary arrays\r\n\r\n    * Added a new mixin class in auxiliary, BinaryDataArrayTransformer\r\n      which encapsulates the process of converting a base64 bytestring\r\n      into a numpy array.\r\n      - If decoding is done immediately, the functionality is essentially\r\n        identical to previous implementation.\r\n      - If decoding is off (decode_binary=False), instead of discarding the\r\n        base64 bytestring and the associated compression information, it\r\n        creates a namedtuple which records the bytestring, the compression\r\n        type and the dtype of the encoded array, with a method to decode the\r\n        array later.\r\n      - Adapted the decompression process to permit more than just zlib compression,\r\n        supporting the addition of future decompressor implementations.\r\n    * Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\r\n      which splices the class into the inheritance hierarchy for mzml.MzML and\r\n      mzxml.MzXML.\r\n    * Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\r\n      the single call aux._decode_base64_data_array.\r\n      - Altered MzML._determine_compression to recover the compression\r\n        type as a string instead of as a boolean without information about which\r\n        compression method was used.\r\n      - Altered MzML._handle_binary to use decode_data_array when decoding arrays\r\n        and _make_record when not.\r\n    * Modified mzxml.MzXML to use the new API as in mzml.MzML.\r\n\r\n* documentation: document aux.BinaryDataArrayTransformer", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/14/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diffstat/levitsky/pyteomics:6c6236d25e0a%0D12b94aa21cbe?from_pullrequest_id=14"}, "commits": {"href": "data/repositories/levitsky/pyteomics/pullrequests/14/commits.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/14.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/pullrequests/14/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/14/merge"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/14"}, "activity": {"href": "data/repositories/levitsky/pyteomics/pullrequests/14/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/levitsky/pyteomics:6c6236d25e0a%0D12b94aa21cbe?from_pullrequest_id=14"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/14/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/pullrequests/14/statuses_page=1.json"}}, "title": "Compression factoring", "close_source_branch": true, "reviewers": [{"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}], "id": 14, "destination": {"commit": {"hash": "12b94aa21cbe", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/12b94aa21cbe.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/12b94aa21cbe"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "created_on": "2018-01-05T01:20:46.328915+00:00", "summary": {"raw": "* feature: added new interface for delaying decoding of base64 binary arrays\r\n\r\n    * Added a new mixin class in auxiliary, BinaryDataArrayTransformer\r\n      which encapsulates the process of converting a base64 bytestring\r\n      into a numpy array.\r\n      - If decoding is done immediately, the functionality is essentially\r\n        identical to previous implementation.\r\n      - If decoding is off (decode_binary=False), instead of discarding the\r\n        base64 bytestring and the associated compression information, it\r\n        creates a namedtuple which records the bytestring, the compression\r\n        type and the dtype of the encoded array, with a method to decode the\r\n        array later.\r\n      - Adapted the decompression process to permit more than just zlib compression,\r\n        supporting the addition of future decompressor implementations.\r\n    * Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\r\n      which splices the class into the inheritance hierarchy for mzml.MzML and\r\n      mzxml.MzXML.\r\n    * Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\r\n      the single call aux._decode_base64_data_array.\r\n      - Altered MzML._determine_compression to recover the compression\r\n        type as a string instead of as a boolean without information about which\r\n        compression method was used.\r\n      - Altered MzML._handle_binary to use decode_data_array when decoding arrays\r\n        and _make_record when not.\r\n    * Modified mzxml.MzXML to use the new API as in mzml.MzML.\r\n\r\n* documentation: document aux.BinaryDataArrayTransformer", "markup": "markdown", "html": "<ul>\n<li>\n<p>feature: added new interface for delaying decoding of base64 binary arrays</p>\n<ul>\n<li>Added a new mixin class in auxiliary, BinaryDataArrayTransformer\n  which encapsulates the process of converting a base64 bytestring\n  into a numpy array.</li>\n<li>If decoding is done immediately, the functionality is essentially\n    identical to previous implementation.</li>\n<li>If decoding is off (decode_binary=False), instead of discarding the\n    base64 bytestring and the associated compression information, it\n    creates a namedtuple which records the bytestring, the compression\n    type and the dtype of the encoded array, with a method to decode the\n    array later.</li>\n<li>Adapted the decompression process to permit more than just zlib compression,\n    supporting the addition of future decompressor implementations.</li>\n<li>Modified xml.ArrayConversionMixin to inherit from aux.BinaryDataArrayTransformer\n  which splices the class into the inheritance hierarchy for mzml.MzML and\n  mzxml.MzXML.</li>\n<li>Modified mzml.MzML to use the new BinaryDataArrayTransformer API instead of\n  the single call aux._decode_base64_data_array.</li>\n<li>Altered MzML._determine_compression to recover the compression\n    type as a string instead of as a boolean without information about which\n    compression method was used.</li>\n<li>Altered MzML._handle_binary to use decode_data_array when decoding arrays\n    and _make_record when not.</li>\n<li>Modified mzxml.MzXML to use the new API as in mzml.MzML.</li>\n</ul>\n</li>\n<li>\n<p>documentation: document aux.BinaryDataArrayTransformer</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "3f40bd156dbe", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/3f40bd156dbe"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/3f40bd156dbe"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "compression_factoring"}}, "comment_count": 9, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2018-01-24T17:22:07.905155+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}, {"role": "PARTICIPANT", "participated_on": "2018-01-24T17:35:16.598765+00:00", "type": "participant", "approved": false, "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}], "reason": "", "updated_on": "2018-01-24T17:35:17.048194+00:00", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "merge_commit": {"hash": "6c6236d25e0a", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/6c6236d25e0a.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/6c6236d25e0a"}}}, "closed_by": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}