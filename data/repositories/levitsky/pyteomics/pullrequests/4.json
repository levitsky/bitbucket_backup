{"rendered": {"description": {"raw": "This new class is derived from the original mzml.MzML reader, with a modified __init__ method\r\nto build up a byte offset index for spectra relative to the start of the file. This lets the file reader jump to the start of the spectrum immediately before parsing, removing the lengthy seek time for large files. If applied to a non-indexed MzML file, the class will fall back on its parent class methods with no loss of functionality, but without the substantial improvement in random access performance\r\nby `get_by_id`.\r\n\r\nAs a convenience notation, I also set the __getitem__ method on the IndexedMzML class to invoke `get_by_id` as the interface makes sense given the behavior, but this asymmetry with the base class may not be worth the saved characters.\r\n\r\nI added the new class to the list of callables to test in tests/test_mzml.py, where it passed the existing test suite.\r\n\r\nI made this for convenience in testing my newest problem, deisotoping and charge state determination. Every time I reset the interpreter, having to re-seek to a problematic scan took too long.\r\n\r\nAn example MzML file from the wild a year ago with an invalid index is available compressed at [https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing](https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing) The file is quite large, so it is compressed.", "markup": "markdown", "html": "<p>This new class is derived from the original mzml.MzML reader, with a modified <strong>init</strong> method\nto build up a byte offset index for spectra relative to the start of the file. This lets the file reader jump to the start of the spectrum immediately before parsing, removing the lengthy seek time for large files. If applied to a non-indexed MzML file, the class will fall back on its parent class methods with no loss of functionality, but without the substantial improvement in random access performance\nby <code>get_by_id</code>.</p>\n<p>As a convenience notation, I also set the <strong>getitem</strong> method on the IndexedMzML class to invoke <code>get_by_id</code> as the interface makes sense given the behavior, but this asymmetry with the base class may not be worth the saved characters.</p>\n<p>I added the new class to the list of callables to test in tests/test_mzml.py, where it passed the existing test suite.</p>\n<p>I made this for convenience in testing my newest problem, deisotoping and charge state determination. Every time I reset the interpreter, having to re-seek to a problematic scan took too long.</p>\n<p>An example MzML file from the wild a year ago with an invalid index is available compressed at <a data-is-external-link=\"true\" href=\"https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing</a> The file is quite large, so it is compressed.</p>", "type": "rendered"}, "title": {"raw": "Added an IndexedMzML class to make random access of indexed MzML documents possible.", "markup": "markdown", "html": "<p>Added an IndexedMzML class to make random access of indexed MzML documents possible.</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This new class is derived from the original mzml.MzML reader, with a modified __init__ method\r\nto build up a byte offset index for spectra relative to the start of the file. This lets the file reader jump to the start of the spectrum immediately before parsing, removing the lengthy seek time for large files. If applied to a non-indexed MzML file, the class will fall back on its parent class methods with no loss of functionality, but without the substantial improvement in random access performance\r\nby `get_by_id`.\r\n\r\nAs a convenience notation, I also set the __getitem__ method on the IndexedMzML class to invoke `get_by_id` as the interface makes sense given the behavior, but this asymmetry with the base class may not be worth the saved characters.\r\n\r\nI added the new class to the list of callables to test in tests/test_mzml.py, where it passed the existing test suite.\r\n\r\nI made this for convenience in testing my newest problem, deisotoping and charge state determination. Every time I reset the interpreter, having to re-seek to a problematic scan took too long.\r\n\r\nAn example MzML file from the wild a year ago with an invalid index is available compressed at [https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing](https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing) The file is quite large, so it is compressed.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/4/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diffstat/levitsky/pyteomics:ab67e0d4772f%0D7d603942410b?from_pullrequest_id=4"}, "commits": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/commits.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/4/merge"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/4"}, "activity": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/levitsky/pyteomics:ab67e0d4772f%0D7d603942410b?from_pullrequest_id=4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/4/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/statuses_page=1.json"}}, "title": "Added an IndexedMzML class to make random access of indexed MzML documents possible.", "close_source_branch": false, "reviewers": [{"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}], "id": 4, "destination": {"commit": {"hash": "7d603942410b", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/7d603942410b.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/7d603942410b"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "created_on": "2016-04-03T20:00:51.327156+00:00", "summary": {"raw": "This new class is derived from the original mzml.MzML reader, with a modified __init__ method\r\nto build up a byte offset index for spectra relative to the start of the file. This lets the file reader jump to the start of the spectrum immediately before parsing, removing the lengthy seek time for large files. If applied to a non-indexed MzML file, the class will fall back on its parent class methods with no loss of functionality, but without the substantial improvement in random access performance\r\nby `get_by_id`.\r\n\r\nAs a convenience notation, I also set the __getitem__ method on the IndexedMzML class to invoke `get_by_id` as the interface makes sense given the behavior, but this asymmetry with the base class may not be worth the saved characters.\r\n\r\nI added the new class to the list of callables to test in tests/test_mzml.py, where it passed the existing test suite.\r\n\r\nI made this for convenience in testing my newest problem, deisotoping and charge state determination. Every time I reset the interpreter, having to re-seek to a problematic scan took too long.\r\n\r\nAn example MzML file from the wild a year ago with an invalid index is available compressed at [https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing](https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing) The file is quite large, so it is compressed.", "markup": "markdown", "html": "<p>This new class is derived from the original mzml.MzML reader, with a modified <strong>init</strong> method\nto build up a byte offset index for spectra relative to the start of the file. This lets the file reader jump to the start of the spectrum immediately before parsing, removing the lengthy seek time for large files. If applied to a non-indexed MzML file, the class will fall back on its parent class methods with no loss of functionality, but without the substantial improvement in random access performance\nby <code>get_by_id</code>.</p>\n<p>As a convenience notation, I also set the <strong>getitem</strong> method on the IndexedMzML class to invoke <code>get_by_id</code> as the interface makes sense given the behavior, but this asymmetry with the base class may not be worth the saved characters.</p>\n<p>I added the new class to the list of callables to test in tests/test_mzml.py, where it passed the existing test suite.</p>\n<p>I made this for convenience in testing my newest problem, deisotoping and charge state determination. Every time I reset the interpreter, having to re-seek to a problematic scan took too long.</p>\n<p>An example MzML file from the wild a year ago with an invalid index is available compressed at <a data-is-external-link=\"true\" href=\"https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/0B6adxGixQdBaZUNDaGdwNDBpMWc/view?usp=sharing</a> The file is quite large, so it is compressed.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ab67e0d4772f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/ab67e0d4772f"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/ab67e0d4772f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "comment_count": 23, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2016-05-04T15:15:45.750498+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}, {"role": "PARTICIPANT", "participated_on": "2016-05-04T15:44:50.506880+00:00", "type": "participant", "approved": false, "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}], "reason": "", "updated_on": "2016-05-05T14:16:02.150294+00:00", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "merge_commit": {"hash": "ab67e0d4772f170bdf6251c071cb9192a06d1cd9", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/ab67e0d4772f170bdf6251c071cb9192a06d1cd9.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/ab67e0d4772f170bdf6251c071cb9192a06d1cd9"}}}, "closed_by": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}