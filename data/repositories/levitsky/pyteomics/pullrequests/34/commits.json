{"pagelen": 100, "values": [{"hash": "82c125a24959950a37e44bd3271337b9e273817d", "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/82c125a24959950a37e44bd3271337b9e273817d.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/commit/82c125a24959950a37e44bd3271337b9e273817d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/patch/82c125a24959950a37e44bd3271337b9e273817d"}, "html": {"href": "#!/levitsky/pyteomics/commits/82c125a24959950a37e44bd3271337b9e273817d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/82c125a24959950a37e44bd3271337b9e273817d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/commit/82c125a24959950a37e44bd3271337b9e273817d/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/commit/82c125a24959950a37e44bd3271337b9e273817d/statuses_page=1.json"}}, "author": {"raw": "mobiusklein <mobiusklein@gmail.com>", "type": "author", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}, "summary": {"raw": "feature:Make the charge parser used by MGFBase overrideable by inheritance\n\nThe default charge parser was written to defend against poorly formatted,\nambiguous charge states from the bad old days of low resolution instruments.\nHowever, regexes are slow compared to exact string operations, and when the\nyou don't need to handle the ambiguity it can be the slowest part of parsing.\nThis patch allows you to override the charge parser function through inheritance\nrather than by monkeypatching `pyteomics.mgf.aux._parse_charge` globally.\n\nThe new tests for the index saving process for MGF broke on Windows because of\nnewline conversion (\\n -> \\n\\r), resulting in incorrect offsets. Opening the files\nin binary mode ensures that the original line endings are preserved. The types of\nthe reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists\ndo not equal tuples even if their contents are the same?\n\nLastly, PyteomicsError was defined to take only one argument, the error message\nbut pylint observed it was called with an additional parameter occaisionally. While\nthe error would result from invalid user code rather than library code, allowing it\nto take additional arguments satisfied the static code checker.", "markup": "markdown", "html": "<p>feature:Make the charge parser used by MGFBase overrideable by inheritance</p>\n<p>The default charge parser was written to defend against poorly formatted,<br />\nambiguous charge states from the bad old days of low resolution instruments.<br />\nHowever, regexes are slow compared to exact string operations, and when the<br />\nyou don't need to handle the ambiguity it can be the slowest part of parsing.<br />\nThis patch allows you to override the charge parser function through inheritance<br />\nrather than by monkeypatching <code>pyteomics.mgf.aux._parse_charge</code> globally.</p>\n<p>The new tests for the index saving process for MGF broke on Windows because of<br />\nnewline conversion (\\n -&gt; \\n\\r), resulting in incorrect offsets. Opening the files<br />\nin binary mode ensures that the original line endings are preserved. The types of<br />\nthe reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists<br />\ndo not equal tuples even if their contents are the same?</p>\n<p>Lastly, PyteomicsError was defined to take only one argument, the error message<br />\nbut pylint observed it was called with an additional parameter occaisionally. While<br />\nthe error would result from invalid user code rather than library code, allowing it<br />\nto take additional arguments satisfied the static code checker.</p>", "type": "rendered"}, "parents": [{"hash": "6b5eac1e4360c18a7c7beb2ae3f3f7884d49e87f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/6b5eac1e4360c18a7c7beb2ae3f3f7884d49e87f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/6b5eac1e4360c18a7c7beb2ae3f3f7884d49e87f"}}}], "date": "2019-03-12T02:10:24+00:00", "message": "feature:Make the charge parser used by MGFBase overrideable by inheritance\n\nThe default charge parser was written to defend against poorly formatted,\nambiguous charge states from the bad old days of low resolution instruments.\nHowever, regexes are slow compared to exact string operations, and when the\nyou don't need to handle the ambiguity it can be the slowest part of parsing.\nThis patch allows you to override the charge parser function through inheritance\nrather than by monkeypatching `pyteomics.mgf.aux._parse_charge` globally.\n\nThe new tests for the index saving process for MGF broke on Windows because of\nnewline conversion (\\n -> \\n\\r), resulting in incorrect offsets. Opening the files\nin binary mode ensures that the original line endings are preserved. The types of\nthe reference offsets' containers needed to be adjusted to satisfy Py3.6 where lists\ndo not equal tuples even if their contents are the same?\n\nLastly, PyteomicsError was defined to take only one argument, the error message\nbut pylint observed it was called with an additional parameter occaisionally. While\nthe error would result from invalid user code rather than library code, allowing it\nto take additional arguments satisfied the static code checker.", "type": "commit"}], "page": 1}