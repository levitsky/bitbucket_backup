{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34/comments/94698911.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/34/_/diff#comment-94698911"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 34, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/34.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/34"}}, "title": "feature:Make the charge parser used by MGFBase overrideable by inheritance"}, "content": {"raw": "Thanks. I had noticed before that charge parsing was one of the slowest parts of MGF parsing, but now that I think of it, I wrote the parsing utility for precursor charges \\(where I\u2019ve seen lists of values and \u201c\\+\u201d chars\\), while most of the overhead was when reading fragment charges, which I only ever saw as regular ints. Perhaps these two should be decoupled? Then again, a lot of the overhead comes from masked array creation, too.", "markup": "markdown", "html": "<p>Thanks. I had noticed before that charge parsing was one of the slowest parts of MGF parsing, but now that I think of it, I wrote the parsing utility for precursor charges (where I\u2019ve seen lists of values and \u201c+\u201d chars), while most of the overhead was when reading fragment charges, which I only ever saw as regular ints. Perhaps these two should be decoupled? Then again, a lot of the overhead comes from masked array creation, too.</p>", "type": "rendered"}, "created_on": "2019-03-12T15:40:03.633331+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-03-12T15:40:03.716706+00:00", "type": "pullrequest_comment", "id": 94698911}