{"rendered": {"description": {"raw": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "markup": "markdown", "html": "<p>The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.</p>\n<p>To avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.</p>\n<ul>\n<li>\n<p>Made flattening of &lt;binary&gt; tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.</p>\n</li>\n<li>\n<p>Being more neat about special handling of 'binary'</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Default", "markup": "markdown", "html": "<p>Default</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/11/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diffstat/levitsky/pyteomics:3a8783827c0e%0De665cb024cac?from_pullrequest_id=11"}, "commits": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/commits.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/11/merge"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/11"}, "activity": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/levitsky/pyteomics:3a8783827c0e%0De665cb024cac?from_pullrequest_id=11"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/11/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/pullrequests/11/statuses_page=1.json"}}, "title": "Default", "close_source_branch": false, "reviewers": [], "id": 11, "destination": {"commit": {"hash": "e665cb024cac", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/e665cb024cac.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/e665cb024cac"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "created_on": "2017-01-19T20:30:57.861463+00:00", "summary": {"raw": "The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.\r\n\r\nTo avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.\r\n\r\n* Made flattening of <binary> tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.\r\n\r\n* Being more neat about special handling of 'binary'", "markup": "markdown", "html": "<p>The mzML standard allows the implementer to create their own binary array types provided they are labeled with the CV term \"non-standard data array\". There can be arbitrarily many of these per spectrum. The current method for resolving the name of data arrays may decide they are all named \"non-standard data array\" and mask all but the last one.</p>\n<p>To avoid this issue, I've added a more complex name resolution algorithm that is tries to find any name ending in \" array\" other than \"non-standard data array\", so a document that uses conforming names can still be read. Theoretically, an even more permissive algorithm could be used, but this is unusual enough as it is.</p>\n<ul>\n<li>\n<p>Made flattening of &lt;binary&gt; tags in mzML smarter about resolving multiple non-standard arrays with userParam names ending in ' array'.</p>\n</li>\n<li>\n<p>Being more neat about special handling of 'binary'</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "3a8783827c0e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/3a8783827c0e"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/3a8783827c0e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "default"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-01-19T21:43:36.985016+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}, {"role": "PARTICIPANT", "participated_on": "2017-01-19T21:33:20.998437+00:00", "type": "participant", "approved": false, "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}], "reason": "", "updated_on": "2017-01-19T21:43:36.993106+00:00", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "merge_commit": {"hash": "3a8783827c0e84a57c45dd7df16f9de148b03824", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3a8783827c0e84a57c45dd7df16f9de148b03824.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3a8783827c0e84a57c45dd7df16f9de148b03824"}}}, "closed_by": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}