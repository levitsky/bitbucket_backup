{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/87032500.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-87032500"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I took the liberty of adding a couple of extra elements in TraML for \u201cpromotion\u201d. They can have userParams in them but otherwise should be okay.", "markup": "markdown", "html": "<p>I took the liberty of adding a couple of extra elements in TraML for \u201cpromotion\u201d. They can have userParams in them but otherwise should be okay.</p>", "type": "rendered"}, "created_on": "2019-01-03T22:06:01.642116+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-03T22:06:01.652863+00:00", "type": "pullrequest_comment", "id": 87032500}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"update": {"description": "Rewrote `XML._handle_param` to return a namedtuple `xml._XMLParam` to carry more information, and to make the structure more consistent.\r\n\r\nEncapsulated the process of adding a \\*Param tag's data into a function \\(`XML._insert_param`\\) and rewrote it to handle `xml._XMLParam` instead of a raw `dict`.\r\n\r\nBetter handle cases where `recursive=False` but the current element contains \\*Param tags that are relevant, with `XML._find_immediate_params`.\r\n\r\n---\r\n\r\nThis also includes a new configuration variable for testing, `XML._promote_empty_param_to_name` to cause elements which contain only one parameter child which has no value will also have its value written to the name key, e.g. `info[\"name\"] = param.name`. It's set to `False` currently because it will involve destructively updating the test case data, but I think you might want to test with it enabled to see if you think it\u2019s worth the duplication.\r\n\r\n---\r\n\r\nFix: Remove patching of warnings module internals from `mzid` as it caused tests to fail.", "title": "Feature: Implement XML parameter repackaging for detecting empty parameters", "destination": {"commit": {"hash": "bc45c900a3cc", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/bc45c900a3cc.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/bc45c900a3cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "99950bd1a72c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/99950bd1a72c"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/99950bd1a72c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "MERGED", "author": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "date": "2019-01-03T15:25:53.163068+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86995362.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86995362"}}, "parent": {"id": 86986384, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86986384.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86986384"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Thank you!", "markup": "markdown", "html": "<p>Thank you!</p>", "type": "rendered"}, "created_on": "2019-01-03T15:25:39.600568+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-03T15:25:39.617491+00:00", "type": "pullrequest_comment", "id": 86995362}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86986384.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86986384"}}, "parent": {"id": 86976718, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86976718.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86976718"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I removed the global name promotion code and included identical handlers for those three other element types in that commit too. I think it is okay for now, but I\u2019ll think about the problem a bit more.", "markup": "markdown", "html": "<p>I removed the global name promotion code and included identical handlers for those three other element types in that commit too. I think it is okay for now, but I\u2019ll think about the problem a bit more.</p>", "type": "rendered"}, "created_on": "2019-01-03T14:19:19.367807+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-03T14:19:19.508589+00:00", "type": "pullrequest_comment", "id": 86986384}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86976718.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86976718"}}, "parent": {"id": 86975417, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86975417.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86975417"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Okay, thank you. Where does this leave us with duplication and single-parameter flattening? The former is still enabled by that private switch, do you want to keep it?\n\nAnd the latter still happens sort of unconditionally and seems to work nice for `<SpectrumIDFormat>` and `<FileFormat>` in the test case. But, is it all right that there is a lot of unconditional processing after the custom handler finishes?\n\nI like the current output though, and I doubt anyone will write any handlers besides us, so I am fine with merging this when you say it\u2019s ready.", "markup": "markdown", "html": "<p>Okay, thank you. Where does this leave us with duplication and single-parameter flattening? The former is still enabled by that private switch, do you want to keep it?</p>\n<p>And the latter still happens sort of unconditionally and seems to work nice for <code>&lt;SpectrumIDFormat&gt;</code> and <code>&lt;FileFormat&gt;</code> in the test case. But, is it all right that there is a lot of unconditional processing after the custom handler finishes?</p>\n<p>I like the current output though, and I doubt anyone will write any handlers besides us, so I am fine with merging this when you say it\u2019s ready.</p>", "type": "rendered"}, "created_on": "2019-01-03T13:01:07.578060+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-03T13:36:34.861060+00:00", "type": "pullrequest_comment", "id": 86976718}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86975417.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86975417"}}, "parent": {"id": 86974864, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86974864.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86974864"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Yes, that's the idea. Technically there can be any number of cvParams in `<Modification>`, but on average it will only be one , either a UNIMOD parameter or an \"unknown modification\" parameter whose value is the human name for that modification. There may be cross-linking information added as well, but these will have values. There is no guarantee there won't be another valueless parameter, but it's just unlikely given the current state of the spec. You're not allowed to have `<userParam>`s in `<Modification>`, which makes it safer too. ", "markup": "markdown", "html": "<p>Yes, that's the idea. Technically there can be any number of cvParams in <code>&lt;Modification&gt;</code>, but on average it will only be one , either a UNIMOD parameter or an \"unknown modification\" parameter whose value is the human name for that modification. There may be cross-linking information added as well, but these will have values. There is no guarantee there won't be another valueless parameter, but it's just unlikely given the current state of the spec. You're not allowed to have <code>&lt;userParam&gt;</code>s in <code>&lt;Modification&gt;</code>, which makes it safer too. </p>", "type": "rendered"}, "created_on": "2019-01-03T12:50:48.395666+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-03T12:50:48.466313+00:00", "type": "pullrequest_comment", "id": 86975417}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86974864.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86974864"}}, "parent": {"id": 86930599, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86930599.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86930599"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Sorry for slow responses. To try and catch up: you were saying that only three elements are safe for this \"name\" promotion. So, I see that in theory `<Modification>` can have other cvParam elements in it, but in the spec I don\u2019t see any examples where there is more than one element without a value. Is this why we think it is okay to inject \u201cname\u201d in there?", "markup": "markdown", "html": "<p>Sorry for slow responses. To try and catch up: you were saying that only three elements are safe for this \"name\" promotion. So, I see that in theory <code>&lt;Modification&gt;</code> can have other cvParam elements in it, but in the spec I don\u2019t see any examples where there is more than one element without a value. Is this why we think it is okay to inject \u201cname\u201d in there?</p>", "type": "rendered"}, "created_on": "2019-01-03T12:45:23.155926+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-03T12:45:23.174163+00:00", "type": "pullrequest_comment", "id": 86974864}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"update": {"description": "Rewrote `XML._handle_param` to return a namedtuple `xml._XMLParam` to carry more information, and to make the structure more consistent.\r\n\r\nEncapsulated the process of adding a \\*Param tag's data into a function \\(`XML._insert_param`\\) and rewrote it to handle `xml._XMLParam` instead of a raw `dict`.\r\n\r\nBetter handle cases where `recursive=False` but the current element contains \\*Param tags that are relevant, with `XML._find_immediate_params`.\r\n\r\n---\r\n\r\nThis also includes a new configuration variable for testing, `XML._promote_empty_param_to_name` to cause elements which contain only one parameter child which has no value will also have its value written to the name key, e.g. `info[\"name\"] = param.name`. It's set to `False` currently because it will involve destructively updating the test case data, but I think you might want to test with it enabled to see if you think it\u2019s worth the duplication.\r\n\r\n---\r\n\r\nFix: Remove patching of warnings module internals from `mzid` as it caused tests to fail.", "title": "Feature: Implement XML parameter repackaging for detecting empty parameters", "destination": {"commit": {"hash": "bc45c900a3cc", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/bc45c900a3cc.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/bc45c900a3cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "99950bd1a72c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/99950bd1a72c"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/99950bd1a72c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-03T12:14:58.330977+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86930599.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86930599"}}, "parent": {"id": 86875384, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86875384.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86875384"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Technically, no place is truly safe for promotion if it allows for more than one  Param tag_._ According to the spec for mzIdentML, there may be one and only one parameter for `<SpectrumIDFormat>`,  `<FileFormat>`, and `<Role>`. There are no places which are truly safe for mzML. \n\nFor now, we can start with the simplest method, doing `_promote_empty_params_to_name` on a per-element basis using a registered handler, and build on it as needed. Those handlers can use `cvquery` to \u201cact smart\u201d if necessary, and as long as there is a way to get the right answer from the transformed result. ", "markup": "markdown", "html": "<p>Technically, no place is truly safe for promotion if it allows for more than one  Param tag_._ According to the spec for mzIdentML, there may be one and only one parameter for <code>&lt;SpectrumIDFormat&gt;</code>,  <code>&lt;FileFormat&gt;</code>, and <code>&lt;Role&gt;</code>. There are no places which are truly safe for mzML. </p>\n<p>For now, we can start with the simplest method, doing <code>_promote_empty_params_to_name</code> on a per-element basis using a registered handler, and build on it as needed. Those handlers can use <code>cvquery</code> to \u201cact smart\u201d if necessary, and as long as there is a way to get the right answer from the transformed result. </p>", "type": "rendered"}, "created_on": "2019-01-03T02:09:49.683325+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-03T02:09:49.763755+00:00", "type": "pullrequest_comment", "id": 86930599}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86875384.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86875384"}}, "parent": {"id": 86869104, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86869104.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86869104"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I\u2019m afraid hiding the \u201cname\u201d key may defeat the purpose of convenience, because the user won\u2019t go for the \u201cname\u201d key at all if it\u2019s not visible.\n\nAs for the tag-specific handling, this feels like the proper approach. It could be implementing differently, though, once again raising the question of convenience vs simplicity or, in this case, versatility. In your example, the handler gets passed the info dict. Alternatively, it can get the element itself \\(most versatile, most work by the user\\) or at the other extreme, we can simply redefine `_promote_empty_param_to_name`\u00a0 and `_remove_duplicate_keys` on a tag-specific basis \\(least work, least versatile\\).\n\nYour example looks like a sane trade-off, though, only doing post-processing on a pre-formed dict should be good enough. What would be the way to get a list of tags where the \u201cname\u201d substitution or complete flattening are safe?", "markup": "markdown", "html": "<p>I\u2019m afraid hiding the \u201cname\u201d key may defeat the purpose of convenience, because the user won\u2019t go for the \u201cname\u201d key at all if it\u2019s not visible.</p>\n<p>As for the tag-specific handling, this feels like the proper approach. It could be implementing differently, though, once again raising the question of convenience vs simplicity or, in this case, versatility. In your example, the handler gets passed the info dict. Alternatively, it can get the element itself (most versatile, most work by the user) or at the other extreme, we can simply redefine <code>_promote_empty_param_to_name</code>\u00a0 and <code>_remove_duplicate_keys</code> on a tag-specific basis (least work, least versatile).</p>\n<p>Your example looks like a sane trade-off, though, only doing post-processing on a pre-formed dict should be good enough. What would be the way to get a list of tags where the \u201cname\u201d substitution or complete flattening are safe?</p>", "type": "rendered"}, "created_on": "2019-01-02T14:03:18.461748+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-02T14:03:18.473489+00:00", "type": "pullrequest_comment", "id": 86875384}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86869104.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86869104"}}, "parent": {"id": 86867360, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86867360.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86867360"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I think the safest choice is duplication. There are other options involving abstraction. \n\nThe first is to return a `dict`-like object rather than a plain `dict` which handles queries for the `\"name\"` key differently. \n\n```python\nclass NameDict(dict):\n    def __missing__(self, key):\n        if key == \"name\":\n            return self._name_interpolation()\n        else:\n            raise KeyError(key)\n    \n    def _name_interpolation(self):\n        # guesswork\n```\n\nThis may run the risk of looking \"magical\" to the user because they won't see the `\"name\"` key, but it will avoid API breakages. We'd have to determine whether `__contains__`, `keys`, `values`, and `items` would need to be patched as well, and in that case it might make more sense to take the duplication route instead.\n\nThe second is to employ tag-specific processes in `get_info`. Right now, `get_info` is mostly tag-agnostic, with the exception of \\*Param tags and root elements. We can add a \"handler registry\" to the parser system that look up methods to call when processing specific tags.\n\n```python\nclass XML(...):\n   def _get_info(self, element, *args, **kwargs):\n       tag_name = _local_name(element)\n       info = {}\n       ...\n       handler = self._handler_registry.get(tag_name)\n       if handler is not None:\n           info = handler(info)\n       ...\n       return info\n```\n\nThis doesn\u2019t cause any duplication or type inconsistency, but it does mean that not all XML is processed the same way, and that means that ergonomic choices have to be explicitly specified, either by us or the user. ", "markup": "markdown", "html": "<p>I think the safest choice is duplication. There are other options involving abstraction. </p>\n<p>The first is to return a <code>dict</code>-like object rather than a plain <code>dict</code> which handles queries for the <code>\"name\"</code> key differently. </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">NameDict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__missing__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name_interpolation</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_name_interpolation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># guesswork</span>\n</pre></div>\n\n\n<p>This may run the risk of looking \"magical\" to the user because they won't see the <code>\"name\"</code> key, but it will avoid API breakages. We'd have to determine whether <code>__contains__</code>, <code>keys</code>, <code>values</code>, and <code>items</code> would need to be patched as well, and in that case it might make more sense to take the duplication route instead.</p>\n<p>The second is to employ tag-specific processes in <code>get_info</code>. Right now, <code>get_info</code> is mostly tag-agnostic, with the exception of *Param tags and root elements. We can add a \"handler registry\" to the parser system that look up methods to call when processing specific tags.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">XML</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"nf\">_get_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n       <span class=\"n\">tag_name</span> <span class=\"o\">=</span> <span class=\"n\">_local_name</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n       <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n       <span class=\"o\">...</span>\n       <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_handler_registry</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">tag_name</span><span class=\"p\">)</span>\n       <span class=\"k\">if</span> <span class=\"n\">handler</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n           <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n       <span class=\"o\">...</span>\n       <span class=\"k\">return</span> <span class=\"n\">info</span>\n</pre></div>\n\n\n<p>This doesn\u2019t cause any duplication or type inconsistency, but it does mean that not all XML is processed the same way, and that means that ergonomic choices have to be explicitly specified, either by us or the user. </p>", "type": "rendered"}, "created_on": "2019-01-02T13:05:47.770690+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-02T13:05:47.889019+00:00", "type": "pullrequest_comment", "id": 86869104}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86867360.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86867360"}}, "parent": {"id": 86778753, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778753.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778753"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I\u2019m pretty sure Bitbucket never notified me of your reply. Sorry about that.\n\nI agree that having one or several parameters affects the output layout. What I was saying is that even with duplication, you still get slightly different results in this case \\(\u201cname\u201d present or missing\\) which can lead to exceptions in some code.\n\nSo we have three options and two \\(maybe three\\) qualities to optimize: robustness, convenience and cleanness/simplicity. \\(Simplicity of the dict layout affects convenience, duplication does not\\)\n\nDepending on the scenario, one or the other may be more important. In one-off scripts or interactive sessions, robustness is not as important as when writing end-user software for publication. We can probably use two private configuration parameters to choose between all three behaviors. In that case, though, it makes sense to me to opt for convenience by default, so that quick things are still quick to do.\n\nWould that make sense to you? It does smell a little bit of over-engineering or at least over-thinking, but then it\u2019s really hard to make decisions knowing so little about the user base and their cases. I understand I\u2019d have to document all of this if we go for it, too.", "markup": "markdown", "html": "<p>I\u2019m pretty sure Bitbucket never notified me of your reply. Sorry about that.</p>\n<p>I agree that having one or several parameters affects the output layout. What I was saying is that even with duplication, you still get slightly different results in this case (\u201cname\u201d present or missing) which can lead to exceptions in some code.</p>\n<p>So we have three options and two (maybe three) qualities to optimize: robustness, convenience and cleanness/simplicity. (Simplicity of the dict layout affects convenience, duplication does not)</p>\n<p>Depending on the scenario, one or the other may be more important. In one-off scripts or interactive sessions, robustness is not as important as when writing end-user software for publication. We can probably use two private configuration parameters to choose between all three behaviors. In that case, though, it makes sense to me to opt for convenience by default, so that quick things are still quick to do.</p>\n<p>Would that make sense to you? It does smell a little bit of over-engineering or at least over-thinking, but then it\u2019s really hard to make decisions knowing so little about the user base and their cases. I understand I\u2019d have to document all of this if we go for it, too.</p>", "type": "rendered"}, "created_on": "2019-01-02T12:46:31.369413+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-02T12:47:34.579010+00:00", "type": "pullrequest_comment", "id": 86867360}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778753.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778753"}}, "parent": {"id": 86778652, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778652.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778652"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "You're right. In haste, I overlooked the last bit of the inner loop of\n`CVQueryEngine._walk_dict`, so `cvquery` would still work. I'm still\nconcerned about cases like this:\n```xml\n    <AdditionalSearchParams>\n      <cvParam cvRef=\"PSI-MS\" accession=\"MS:1001211\" name=\"parent mass type\nmono\"></cvParam>\n      <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002494\" name=\"cross-linking\nsearch\"></cvParam>\n      <cvParam cvRef=\"PSI-MS\" accession=\"MS:1001256\" name=\"fragment mass\ntype mono\"></cvParam>\n    </AdditionalSearchParams>\n```\nThe `<AdditionalSearchParams>` element contains 1 or more params. In this\ncase, the produced dict is\n```python\n{'cross-linking search': '',\n 'fragment mass type mono': '',\n 'parent mass type mono': ''}\n```\nWhile if it only had one parameter, it would be\n```python\n{'name': 'cross-linking search'}\n```\nThis kind of inconsistency is problematic too. Duplication prevents this,\nbut makes things less \"clean\". Of course, using `cvquery` here would solve\nthe problem, but that's an ugly solution too.", "markup": "markdown", "html": "<p>You're right. In haste, I overlooked the last bit of the inner loop of\n<code>CVQueryEngine._walk_dict</code>, so <code>cvquery</code> would still work. I'm still\nconcerned about cases like this:</p>\n<div class=\"codehilite language-xml\"><pre><span></span>    <span class=\"nt\">&lt;AdditionalSearchParams&gt;</span>\n      <span class=\"nt\">&lt;cvParam</span> <span class=\"na\">cvRef=</span><span class=\"s\">&quot;PSI-MS&quot;</span> <span class=\"na\">accession=</span><span class=\"s\">&quot;MS:1001211&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;parent mass type</span>\n<span class=\"s\">mono&quot;</span><span class=\"nt\">&gt;&lt;/cvParam&gt;</span>\n      <span class=\"nt\">&lt;cvParam</span> <span class=\"na\">cvRef=</span><span class=\"s\">&quot;PSI-MS&quot;</span> <span class=\"na\">accession=</span><span class=\"s\">&quot;MS:1002494&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;cross-linking</span>\n<span class=\"s\">search&quot;</span><span class=\"nt\">&gt;&lt;/cvParam&gt;</span>\n      <span class=\"nt\">&lt;cvParam</span> <span class=\"na\">cvRef=</span><span class=\"s\">&quot;PSI-MS&quot;</span> <span class=\"na\">accession=</span><span class=\"s\">&quot;MS:1001256&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;fragment mass</span>\n<span class=\"s\">type mono&quot;</span><span class=\"nt\">&gt;&lt;/cvParam&gt;</span>\n    <span class=\"nt\">&lt;/AdditionalSearchParams&gt;</span>\n</pre></div>\n\n\n<p>The <code>&lt;AdditionalSearchParams&gt;</code> element contains 1 or more params. In this\ncase, the produced dict is</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">{</span><span class=\"s1\">&#39;cross-linking search&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n <span class=\"s1\">&#39;fragment mass type mono&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n <span class=\"s1\">&#39;parent mass type mono&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>While if it only had one parameter, it would be</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cross-linking search&#39;</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This kind of inconsistency is problematic too. Duplication prevents this,\nbut makes things less \"clean\". Of course, using <code>cvquery</code> here would solve\nthe problem, but that's an ugly solution too.</p>", "type": "rendered"}, "created_on": "2018-12-29T23:20:06.793155+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-12-29T23:20:09.855516+00:00", "type": "pullrequest_comment", "id": 86778753}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778652.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778652"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "I'm not sure I follow, why would this hide the parameter from `cvquery`, if it looks at both keys and values? At least for the same test.mzid file, `cvquery` shows the same information with and without the change, so I must be missing the issue here.\n\nIf a second parameter gets added to `empty_values`, that indeed changes the dict layout. But on the other hand, code relying on `info['name']` also breaks in this case.\n\nYou're right, it's inappropriate to do what I was doing with `warnings`. There used to be a lot of warnings when `read_schema` was true by default, and the fact that those looked very much like exceptions confused people a lot.", "markup": "markdown", "html": "<p>I'm not sure I follow, why would this hide the parameter from <code>cvquery</code>, if it looks at both keys and values? At least for the same test.mzid file, <code>cvquery</code> shows the same information with and without the change, so I must be missing the issue here.</p>\n<p>If a second parameter gets added to <code>empty_values</code>, that indeed changes the dict layout. But on the other hand, code relying on <code>info['name']</code> also breaks in this case.</p>\n<p>You're right, it's inappropriate to do what I was doing with <code>warnings</code>. There used to be a lot of warnings when <code>read_schema</code> was true by default, and the fact that those looked very much like exceptions confused people a lot.</p>", "type": "rendered"}, "created_on": "2018-12-29T22:45:02.467039+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-12-29T22:45:02.473202+00:00", "type": "pullrequest_comment", "id": 86778652}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778139.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778139"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Removing the value that was hoisted up to be the \"name\" key makes the parameter invisible to `cvquery`, and also leads to code that doesn\u2019t work when a second empty parameter appears.\n\nI think the test failures might either be Windows-specific, or sporadic, since it didn\u2019t happen every time. In any case, a library shouldn\u2019t be patching a global system service without a very good reason, and I didn\u2019t see one there. I thought I had gotten rid of the patching applied elsewhere.", "markup": "markdown", "html": "<p>Removing the value that was hoisted up to be the \"name\" key makes the parameter invisible to <code>cvquery</code>, and also leads to code that doesn\u2019t work when a second empty parameter appears.</p>\n<p>I think the test failures might either be Windows-specific, or sporadic, since it didn\u2019t happen every time. In any case, a library shouldn\u2019t be patching a global system service without a very good reason, and I didn\u2019t see one there. I thought I had gotten rid of the patching applied elsewhere.</p>", "type": "rendered"}, "created_on": "2018-12-29T21:08:15.523346+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-12-29T21:08:15.584582+00:00", "type": "pullrequest_comment", "id": 86778139}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86778033.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86778033"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Wow, I barely finished processing your email and you\u2019ve already written a PR!\n\nI\u2019ve checked how `_promote_empty_param_to_name` works, and yes, it helps in some cases. We can fix the duplication, though, can't we? We could do\n\n```python\nif len(empty_values) == 1 and 'name' not in info:\n    info['name'] = empty_values[0].name\n    del info[empty_values[0].name]\n```\n\nI tried this and what I got with the test mzid file is that those dicts got collapsed into the main dict nicely \\(apparently per line 463 in xml.py\\).\n\nAlso it's interesting that I don't get any failed tests from the `warnings` patching line.", "markup": "markdown", "html": "<p>Wow, I barely finished processing your email and you\u2019ve already written a PR!</p>\n<p>I\u2019ve checked how <code>_promote_empty_param_to_name</code> works, and yes, it helps in some cases. We can fix the duplication, though, can't we? We could do</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">empty_values</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;name&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">empty_values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"k\">del</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">empty_values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>I tried this and what I got with the test mzid file is that those dicts got collapsed into the main dict nicely (apparently per line 463 in xml.py).</p>\n<p>Also it's interesting that I don't get any failed tests from the <code>warnings</code> patching line.</p>", "type": "rendered"}, "created_on": "2018-12-29T20:44:13.776051+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-12-29T20:44:37.474299+00:00", "type": "pullrequest_comment", "id": 86778033}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"update": {"description": "Rewrote `XML._handle_param` to return a namedtuple `xml._XMLParam` to carry more information, and to make the structure more consistent.\r\n\r\nEncapsulated the process of adding a \\*Param tag's data into a function \\(`XML._insert_param`\\) and rewrote it to handle `xml._XMLParam` instead of a raw `dict`.\r\n\r\nBetter handle cases where `recursive=False` but the current element contains \\*Param tags that are relevant, with `XML._find_immediate_params`.\r\n\r\n---\r\n\r\nThis also includes a new configuration variable for testing, `XML._promote_empty_param_to_name` to cause elements which contain only one parameter child which has no value will also have its value written to the name key, e.g. `info[\"name\"] = param.name`. It's set to `False` currently because it will involve destructively updating the test case data, but I think you might want to test with it enabled to see if you think it\u2019s worth the duplication.\r\n\r\n---\r\n\r\nFix: Remove patching of warnings module internals from `mzid` as it caused tests to fail.", "title": "Feature: Implement XML parameter repackaging for detecting empty parameters", "destination": {"commit": {"hash": "bc45c900a3cc", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/bc45c900a3cc.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/bc45c900a3cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "337a8bc1ee81", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/337a8bc1ee81"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/337a8bc1ee81"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-12-29T20:24:18.662978+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86777872.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86777872"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "Would this be problematic if `param.value == 0`?", "markup": "markdown", "html": "<p>Would this be problematic if <code>param.value == 0</code>?</p>", "type": "rendered"}, "created_on": "2018-12-29T20:08:17.068144+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-12-29T20:20:14.801646+00:00", "type": "pullrequest_comment", "id": 86777872}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86777943.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86777943"}}, "parent": {"id": 86777872, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30/comments/86777872.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30/_/diff#comment-86777872"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}, "content": {"raw": "You're right. I'll replace this with a more explicit test.", "markup": "markdown", "html": "<p>You're right. I'll replace this with a more explicit test.</p>", "type": "rendered"}, "created_on": "2018-12-29T20:20:07.991929+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-12-29T20:20:11.097538+00:00", "type": "pullrequest_comment", "id": 86777943}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"update": {"description": "Rewrote `XML._handle_param` to return a namedtuple `xml._XMLParam` to carry more information, and to make the structure more consistent.\r\n\r\nEncapsulated the process of adding a \\*Param tag's data into a function \\(`XML._insert_param`\\) and rewrote it to handle `xml._XMLParam` instead of a raw `dict`.\r\n\r\nBetter handle cases where `recursive=False` but the current element contains \\*Param tags that are relevant, with `XML._find_immediate_params`.\r\n\r\n---\r\n\r\nThis also includes a new configuration variable for testing, `XML._promote_empty_param_to_name` to cause elements which contain only one parameter child which has no value will also have its value written to the name key, e.g. `info[\"name\"] = param.name`. It's set to `False` currently because it will involve destructively updating the test case data, but I think you might want to test with it enabled to see if you think it\u2019s worth the duplication.\r\n\r\n---\r\n\r\nFix: Remove patching of warnings module internals from `mzid` as it caused tests to fail.", "title": "Feature: Implement XML parameter repackaging for detecting empty parameters", "destination": {"commit": {"hash": "bc45c900a3cc", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/bc45c900a3cc.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/bc45c900a3cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "1a09c73ddf15", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/1a09c73ddf15"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/1a09c73ddf15"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-12-29T19:50:30.790953+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}, {"update": {"description": "Rewrote `XML._handle_param` to return a namedtuple `xml._XMLParam` to carry more information, and to make the structure more consistent.\r\n\r\nEncapsulated the process of adding a \\*Param tag's data into a function \\(`XML._insert_param`\\) and rewrote it to handle `xml._XMLParam` instead of a raw `dict`.\r\n\r\nBetter handle cases where `recursive=False` but the current element contains \\*Param tags that are relevant, with `XML._find_immediate_params`.\r\n\r\n---\r\n\r\nThis also includes a new configuration variable for testing, `XML._promote_empty_param_to_name` to cause elements which contain only one parameter child which has no value will also have its value written to the name key, e.g. `info[\"name\"] = param.name`. It's set to `False` currently because it will involve destructively updating the test case data, but I think you might want to test with it enabled to see if you think it\u2019s worth the duplication.\r\n\r\n---\r\n\r\nFix: Remove patching of warnings module internals from `mzid` as it caused tests to fail.", "title": "Feature: Implement XML parameter repackaging for detecting empty parameters", "destination": {"commit": {"hash": "bc45c900a3cc", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/bc45c900a3cc.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/bc45c900a3cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "1a09c73ddf15", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/1a09c73ddf15"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/1a09c73ddf15"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-12-29T19:50:30.739910+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/30.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/30"}}, "title": "Feature: Implement XML parameter repackaging for detecting empty parameters"}}]}