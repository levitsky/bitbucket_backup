{"pagelen": 50, "values": [{"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "499af497bc0a", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/499af497bc0a.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/499af497bc0a"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fe55795890ed", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/fe55795890ed"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/fe55795890ed"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "MERGED", "author": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "date": "2019-01-22T15:34:42.352349+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "499af497bc0a", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/499af497bc0a.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/499af497bc0a"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fe55795890ed", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/fe55795890ed"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/fe55795890ed"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "date": "2019-01-22T15:34:40.888317+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88771213.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88771213"}}, "parent": {"id": 88633029, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88633029.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88633029"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "No, I was thinking of just raising an error. I\u2019m happy with how it is now.\n\nI need to check if there are other places where this function could be used \\(with a different message, though\\), but that can be done post-merge.", "markup": "markdown", "html": "<p>No, I was thinking of just raising an error. I\u2019m happy with how it is now.</p>\n<p>I need to check if there are other places where this function could be used (with a different message, though), but that can be done post-merge.</p>", "type": "rendered"}, "created_on": "2019-01-21T19:49:16.269234+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-21T19:49:16.282528+00:00", "type": "pullrequest_comment", "id": 88771213}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88645856.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88645856"}}, "parent": {"id": 88632943, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88632943.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88632943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "I've made `pandas` optional, but changed things so that requesting the `\"df\"` format an error immediately on instantiation with a more descriptive error message. \n\nWhat else do you think this could use?", "markup": "markdown", "html": "<p>I've made <code>pandas</code> optional, but changed things so that requesting the <code>\"df\"</code> format an error immediately on instantiation with a more descriptive error message. </p>\n<p>What else do you think this could use?</p>", "type": "rendered"}, "created_on": "2019-01-20T20:27:40.632086+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-20T20:27:40.696244+00:00", "type": "pullrequest_comment", "id": 88645856}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "499af497bc0a", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/499af497bc0a.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/499af497bc0a"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fe55795890ed", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/fe55795890ed"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/fe55795890ed"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-20T18:55:53.841970+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88633029.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88633029"}}, "parent": {"id": 88632943, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88632943.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88632943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "In that case, should the default table format be dynamically selected? I'm\nconcerned that might be too magical, making code that looks like it should\nwork (all imports succeed) fail because of incompatible types.", "markup": "markdown", "html": "<p>In that case, should the default table format be dynamically selected? I'm\nconcerned that might be too magical, making code that looks like it should\nwork (all imports succeed) fail because of incompatible types.</p>", "type": "rendered"}, "created_on": "2019-01-19T19:35:06.906025+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-19T19:35:09.981673+00:00", "type": "pullrequest_comment", "id": 88633029}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88632943.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88632943"}}, "parent": {"id": 88031772, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88031772.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88031772"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "This is great!\n\nIt looks to me that now `pandas` is not necessarily required with alternative table formats? In this case it makes sense to me to wrap its import in a `try`, as we do in other modules.", "markup": "markdown", "html": "<p>This is great!</p>\n<p>It looks to me that now <code>pandas</code> is not necessarily required with alternative table formats? In this case it makes sense to me to wrap its import in a <code>try</code>, as we do in other modules.</p>", "type": "rendered"}, "created_on": "2019-01-19T19:21:18.088804+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-19T19:21:18.098170+00:00", "type": "pullrequest_comment", "id": 88632943}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88494999.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88494999"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "I've added documentation for the format reader to the `text` section.", "markup": "markdown", "html": "<p>I've added documentation for the format reader to the <code>text</code> section.</p>", "type": "rendered"}, "created_on": "2019-01-18T01:54:23.720121+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-18T01:54:23.772842+00:00", "type": "pullrequest_comment", "id": 88494999}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5a49ad48f832", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/5a49ad48f832"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/5a49ad48f832"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-18T01:44:00.103306+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88031772.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88031772"}}, "parent": {"id": 87867975, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867975.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867975"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "the `table_format` parameter now controls this.", "markup": "markdown", "html": "<p>the <code>table_format</code> parameter now controls this.</p>", "type": "rendered"}, "created_on": "2019-01-15T02:43:53.285976+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-15T02:43:53.333691+00:00", "type": "pullrequest_comment", "id": 88031772}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6c0ed95a2430", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/6c0ed95a2430"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/6c0ed95a2430"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-15T02:43:14.769935+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/88031356.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-88031356"}}, "parent": {"id": 87867964, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867964.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867964"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "I\u2019ve made the method public, but I decided against further collection collapsing.", "markup": "markdown", "html": "<p>I\u2019ve made the method public, but I decided against further collection collapsing.</p>", "type": "rendered"}, "created_on": "2019-01-15T02:33:27.918025+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-15T02:33:27.963147+00:00", "type": "pullrequest_comment", "id": 88031356}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "83e9b858fe63", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/83e9b858fe63"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/83e9b858fe63"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-15T02:32:27.999508+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87868090.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87868090"}}, "parent": {"id": 87867806, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867806.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867806"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "`__getitem__` was implemented with the concern that we might add aliases to the names I chose rather arbitrarily based upon the row type designations from the format specification. \n\nAdditionally, there is an mzTab 2.0 spec in development which adds more small-molecule- and metabolomics-related tables which I haven\u2019t really looked at yet. ", "markup": "markdown", "html": "<p><code>__getitem__</code> was implemented with the concern that we might add aliases to the names I chose rather arbitrarily based upon the row type designations from the format specification. </p>\n<p>Additionally, there is an mzTab 2.0 spec in development which adds more small-molecule- and metabolomics-related tables which I haven\u2019t really looked at yet. </p>", "type": "rendered"}, "created_on": "2019-01-12T21:48:32.456152+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-12T21:48:32.520180+00:00", "type": "pullrequest_comment", "id": 87868090}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867975.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867975"}}, "parent": {"id": 87867806, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867806.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867806"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "`_MzTabTable.as_dict` was there for debugging purposes. It might be useful for exporting the data in a format other than a `DataFrame` so I retained it. The public API does indeed not really permit its use. An extra parameter could be added to control the table format that `MzTab` exposes once parsing is done.", "markup": "markdown", "html": "<p><code>_MzTabTable.as_dict</code> was there for debugging purposes. It might be useful for exporting the data in a format other than a <code>DataFrame</code> so I retained it. The public API does indeed not really permit its use. An extra parameter could be added to control the table format that <code>MzTab</code> exposes once parsing is done.</p>", "type": "rendered"}, "created_on": "2019-01-12T21:30:07.509224+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-12T21:30:07.561840+00:00", "type": "pullrequest_comment", "id": 87867975}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867964.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867964"}}, "parent": {"id": 87867806, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867806.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867806"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "`_collapse_properties`  is the re-nesting routine. I wrote it initially looking at the `metadata` dictionary and wanted a way to go from \n\n```python\n{\n  \"ms_run[1]-format\": \"Andromeda:apl file format\",\r\n  \"ms_run[1]-location\":\t\"file://c:/users/jklein/projects/msv000080527_abelin2017/combined/andromeda/allspectra.hcd.ftms.secpep.sil0_0.apl\",\r\n  \"ms_run[1]-id_format\": \"scan number only nativeID format\"\n}\n```\n\nto \n\n```python\n{\n  \"ms_run\": [\n    {\n      \"format\": \"Andromeda:apl file format\",\r\n      \"location\": \"file://c:/users/jklein/projects/msv000080527_abelin2017/combined/andromeda/allspectra.hcd.ftms.secpep.sil0_0.apl\",\r\n      \"id_format\": \"scan number only nativeID format\"\n    }\n  ]\n}\n```\n\nThis would be good if I were translating the entire file\u2019s contents into a non-tabular structure, analogous to the hierarchical system in mzIdentML, but that requires making more assumptions than I am comfortable with at the moment. mzTab files may be ID summaries, or complete records of identifications, or summaries or complete records of quantification for both peptides and small molecules.\n\nIt should probably be made a public method.", "markup": "markdown", "html": "<p><code>_collapse_properties</code>  is the re-nesting routine. I wrote it initially looking at the <code>metadata</code> dictionary and wanted a way to go from </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"s2\">&quot;ms_run[1]-format&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Andromeda:apl file format&quot;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;ms_run[1]-location&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;file://c:/users/jklein/projects/msv000080527_abelin2017/combined/andromeda/allspectra.hcd.ftms.secpep.sil0_0.apl&quot;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;ms_run[1]-id_format&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;scan number only nativeID format&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"s2\">&quot;ms_run&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">&quot;format&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Andromeda:apl file format&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;location&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;file://c:/users/jklein/projects/msv000080527_abelin2017/combined/andromeda/allspectra.hcd.ftms.secpep.sil0_0.apl&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;id_format&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;scan number only nativeID format&quot;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This would be good if I were translating the entire file\u2019s contents into a non-tabular structure, analogous to the hierarchical system in mzIdentML, but that requires making more assumptions than I am comfortable with at the moment. mzTab files may be ID summaries, or complete records of identifications, or summaries or complete records of quantification for both peptides and small molecules.</p>\n<p>It should probably be made a public method.</p>", "type": "rendered"}, "created_on": "2019-01-12T21:27:49.170421+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2019-01-12T21:27:49.285511+00:00", "type": "pullrequest_comment", "id": 87867964}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments/87867806.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32/_/diff#comment-87867806"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}, "content": {"raw": "This is of course a very welcome addition, especially if this is the only Python parser out there.\n\nBy the re-nesting routine, do you mean `_collapse_properties`? It\u2019s the only part that I couldn\u2019t get the purpose of, from just looking at the code, and it looks like it\u2019s not used at this point?\n\nAnother small question: is there need for the `as_dict` method? Looks like it\u2019s not used and the `_MzTabTable` object is discarded after the parsing is done.\n\nAlso, why is key checking done this way in `__getitem__`? Are there supposed to be other designations for the same types of data that may be added?", "markup": "markdown", "html": "<p>This is of course a very welcome addition, especially if this is the only Python parser out there.</p>\n<p>By the re-nesting routine, do you mean <code>_collapse_properties</code>? It\u2019s the only part that I couldn\u2019t get the purpose of, from just looking at the code, and it looks like it\u2019s not used at this point?</p>\n<p>Another small question: is there need for the <code>as_dict</code> method? Looks like it\u2019s not used and the <code>_MzTabTable</code> object is discarded after the parsing is done.</p>\n<p>Also, why is key checking done this way in <code>__getitem__</code>? Are there supposed to be other designations for the same types of data that may be added?</p>", "type": "rendered"}, "created_on": "2019-01-12T21:01:52.365902+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2019-01-12T21:01:52.373454+00:00", "type": "pullrequest_comment", "id": 87867806}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a1870483abfc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/a1870483abfc"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/a1870483abfc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-10T20:50:42.446756+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "492e590415c9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/492e590415c9"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/492e590415c9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-10T20:27:07.255529+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}, {"update": {"description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "title": "mzTab Parser", "destination": {"commit": {"hash": "92ff20d9df1f", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/92ff20d9df1f.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/92ff20d9df1f"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "492e590415c9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/492e590415c9"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/492e590415c9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2019-01-10T20:27:07.201199+00:00"}, "pull_request": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}}, "title": "mzTab Parser"}}]}