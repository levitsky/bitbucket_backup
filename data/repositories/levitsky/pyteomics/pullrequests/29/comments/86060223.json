{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/29/comments/86060223.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/29/_/diff#comment-86060223"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/29.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/29"}}, "title": "TraML"}, "content": {"raw": "I was just thinking \u201cWhat\u2019s so hard about implementing another reader?\u201d. It\u2019s not like they require much effort. I had previously factored out your XSD parser on more than one occasion to try to trace it, but this time I finally decided to make it a separate function formally. I thought about doing it for mzQuantML too, but _that_ format is complicated to unpack because of the layered data matrices, and even then nobody uses it.\n\n`ChainBase` was meant to be included. It is a prototype that works under the assumption that every entity it will be fed will be turned into something that implements the `ContextManager` protocol which was implicitly assumed in all code branches other than the one `full_output` selects. Making a type that supports the behavior `full_output` provides is a little more difficult.\n\nMerge conflict resolution in Mercurial seems to require a system command \u201cechomsg\u201d that doesn\u2019t exist, at least on my system. I think I resolved the merge conflict though.", "markup": "markdown", "html": "<p>I was just thinking \u201cWhat\u2019s so hard about implementing another reader?\u201d. It\u2019s not like they require much effort. I had previously factored out your XSD parser on more than one occasion to try to trace it, but this time I finally decided to make it a separate function formally. I thought about doing it for mzQuantML too, but <em>that</em> format is complicated to unpack because of the layered data matrices, and even then nobody uses it.</p>\n<p><code>ChainBase</code> was meant to be included. It is a prototype that works under the assumption that every entity it will be fed will be turned into something that implements the <code>ContextManager</code> protocol which was implicitly assumed in all code branches other than the one <code>full_output</code> selects. Making a type that supports the behavior <code>full_output</code> provides is a little more difficult.</p>\n<p>Merge conflict resolution in Mercurial seems to require a system command \u201cechomsg\u201d that doesn\u2019t exist, at least on my system. I think I resolved the merge conflict though.</p>", "type": "rendered"}, "created_on": "2018-12-18T16:33:28.327104+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-12-18T16:33:28.411844+00:00", "type": "pullrequest_comment", "id": 86060223}