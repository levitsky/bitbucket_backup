{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/comments/17660303.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/4/_/diff#comment-17660303"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/4"}}, "title": "Added an IndexedMzML class to make random access of indexed MzML documents possible."}, "content": {"raw": "To unify the API, we have a few options. \n\n1. Simply replace the `XML` class with the `IndexedXML` class and add a switch to turn on or off the index building to avoid space consumption when its not desirable. `Indexed*` are backwards-compatible with not.\n2. Use a factory function. This is not backwards compatible, and involves making code a little harder to interpret since it no longer is clear you're constructing a new object.\n3. Use a metaclass to make 2 look like 1: A metaclass lets you redefine the behavior of a class's `__call__` method, which is usually invoked when you're instantiating a new instance of that class. It receives all the arguments for `__init__` but is allowed to use `return`, letting you control what comes out of that expression. By overriding this behavior, we can detect a keyword argument to turn on or off indexing, and return an appropriate instance accordingly. This might be useful if we want to eventually do 1 but want to inform users that they have some time before that happens while making it possible to write \"future-proof\" code now. Since `Indexed*` are backwards compatible though, I don't see why not just do 1.\n\nAdditionally, though this pull request was originally intended to just make use of pre-existing MzML indexing, it now can index an MzML file in the same scale of time it would take to parse out the index. We can discard that implementation in favor of\n\n```python\nclass IndexedMzML(MzML, xml.IndexedXML):\n    _indexed_tags = {\n        b\"spectrum\", b\"chromatogram\"}\n\n    def __init__(self, *args, **kwargs):\n        super(IndexedMzML, self).__init__(*args, **kwargs)\n\n```", "markup": "markdown", "html": "<p>To unify the API, we have a few options. </p>\n<ol>\n<li>Simply replace the <code>XML</code> class with the <code>IndexedXML</code> class and add a switch to turn on or off the index building to avoid space consumption when its not desirable. <code>Indexed*</code> are backwards-compatible with not.</li>\n<li>Use a factory function. This is not backwards compatible, and involves making code a little harder to interpret since it no longer is clear you're constructing a new object.</li>\n<li>Use a metaclass to make 2 look like 1: A metaclass lets you redefine the behavior of a class's <code>__call__</code> method, which is usually invoked when you're instantiating a new instance of that class. It receives all the arguments for <code>__init__</code> but is allowed to use <code>return</code>, letting you control what comes out of that expression. By overriding this behavior, we can detect a keyword argument to turn on or off indexing, and return an appropriate instance accordingly. This might be useful if we want to eventually do 1 but want to inform users that they have some time before that happens while making it possible to write \"future-proof\" code now. Since <code>Indexed*</code> are backwards compatible though, I don't see why not just do 1.</li>\n</ol>\n<p>Additionally, though this pull request was originally intended to just make use of pre-existing MzML indexing, it now can index an MzML file in the same scale of time it would take to parse out the index. We can discard that implementation in favor of</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">IndexedMzML</span><span class=\"p\">(</span><span class=\"n\">MzML</span><span class=\"p\">,</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">IndexedXML</span><span class=\"p\">):</span>\n    <span class=\"n\">_indexed_tags</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sa\">b</span><span class=\"s2\">&quot;spectrum&quot;</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;chromatogram&quot;</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">IndexedMzML</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-04-23T22:42:22.295751+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2016-04-23T22:42:22.531655+00:00", "type": "pullrequest_comment", "id": 17660303}