{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4/comments/17975694.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/4/_/diff#comment-17975694"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/4.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/4"}}, "title": "Added an IndexedMzML class to make random access of indexed MzML documents possible."}, "content": {"raw": "I saw you did the inheritance hierarchy restructuring yourself, so I did more research into why my tests with `asizeof` showed such poor savings. As I guessed, `asizeof` can't see through pointers, which means it can't take into account the size of the `lxml.etree._Element`'s `xmlNode*` member.\n\n```python\nx = etree.fromstring(\"<tag id='spam'>Content</tag>\")\nasizeof.asizeof(x)\n# 64\n# Access some stored data\nasizeof.asizeof(x.text)\n# 40\nasizeof.asizeof(x.attrib)\n# 48\n\n# For reference\nasizeof.asizeof([])\n# 64\n```\n\nFor that reason, I think its safe to assume that short of some undocumented magic happening somewhere, storing a bunch of short strings and numbers will amount to much less memory used compared to complex C structs.\n\nI don't have anything else to add to this pull request unless you think something is missing. ", "markup": "markdown", "html": "<p>I saw you did the inheritance hierarchy restructuring yourself, so I did more research into why my tests with <code>asizeof</code> showed such poor savings. As I guessed, <code>asizeof</code> can't see through pointers, which means it can't take into account the size of the <code>lxml.etree._Element</code>'s <code>xmlNode*</code> member.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;tag id=&#39;spam&#39;&gt;Content&lt;/tag&gt;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 64</span>\n<span class=\"c1\"># Access some stored data</span>\n<span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"c1\"># 40</span>\n<span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">)</span>\n<span class=\"c1\"># 48</span>\n\n<span class=\"c1\"># For reference</span>\n<span class=\"n\">asizeof</span><span class=\"o\">.</span><span class=\"n\">asizeof</span><span class=\"p\">([])</span>\n<span class=\"c1\"># 64</span>\n</pre></div>\n\n\n<p>For that reason, I think its safe to assume that short of some undocumented magic happening somewhere, storing a bunch of short strings and numbers will amount to much less memory used compared to complex C structs.</p>\n<p>I don't have anything else to add to this pull request unless you think something is missing. </p>", "type": "rendered"}, "created_on": "2016-05-01T23:54:51.265874+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2016-05-01T23:54:51.341680+00:00", "type": "pullrequest_comment", "id": 17975694}