{"rendered": {"description": {"raw": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "markup": "markdown", "html": "<p>I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.</p>\n<p>There is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into <code>pd.DataFrame</code> objects.</p>\n<p>As tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. </p>\n<p>If the code itself is acceptable, I\u2019ll write the docs for it as well.</p>", "type": "rendered"}, "title": {"raw": "mzTab Parser", "markup": "markdown", "html": "<p>mzTab Parser</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/32/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diffstat/levitsky/pyteomics:384c77c2ae15%0D499af497bc0a?from_pullrequest_id=32"}, "commits": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/commits.json"}, "self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32.json"}, "comments": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/32/merge"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/32"}, "activity": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/diff/levitsky/pyteomics:384c77c2ae15%0D499af497bc0a?from_pullrequest_id=32"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/levitsky/pyteomics/pullrequests/32/approve"}, "statuses": {"href": "data/repositories/levitsky/pyteomics/pullrequests/32/statuses_page=1.json"}}, "title": "mzTab Parser", "close_source_branch": true, "reviewers": [{"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}], "id": 32, "destination": {"commit": {"hash": "499af497bc0a", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/499af497bc0a.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/499af497bc0a"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "default"}}, "created_on": "2019-01-10T20:27:07.184534+00:00", "summary": {"raw": "I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.\r\n\r\nThere is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into `pd.DataFrame` objects.\r\n\r\nAs tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. \r\n\r\nIf the code itself is acceptable, I\u2019ll write the docs for it as well.", "markup": "markdown", "html": "<p>I was playing with a search engine which didn\u2019t support any standard formats other than mzTab and no parsers were available in Python, so I wrote one.</p>\n<p>There is too much specialized behavior at this point. The format is a series of TSVs concatenated together with a shared metadata header. This will pull the data out into their own respective tables, apply some rudimentary type coercion, and then pack them into <code>pd.DataFrame</code> objects.</p>\n<p>As tables go, they\u2019re far from compact, but that is the cost of not nesting structures. I do have a routine in there to re-nest some features, but it defeats the purpose. </p>\n<p>If the code itself is acceptable, I\u2019ll write the docs for it as well.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fe55795890ed", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/fe55795890ed"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/fe55795890ed"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "mztab"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-01-21T19:49:16.282528+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}, {"role": "PARTICIPANT", "participated_on": "2019-01-20T20:27:40.696244+00:00", "type": "participant", "approved": false, "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}}], "reason": "", "updated_on": "2019-01-22T15:34:42.337443+00:00", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "merge_commit": {"hash": "384c77c2ae15", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/384c77c2ae15.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/384c77c2ae15"}}}, "closed_by": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}}