{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76086884.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76086884"}}, "parent": {"id": 76082624, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76082624.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76082624"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Time is really easy *iff* the file is sorted by retention time to begin\nwith. Most vendor files are, but this is not a guarantee. MSConvert\nincludes a command line switch `--sortByScanTime` for this purpose. If the\nfile is sorted, then this is a simple binary search problem without adding\na second index. I use the existing pyteomics XML readers to solve it [here](\nhttps://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/xml_reader.py#L136-L187\n).\n\nWhat's trickier is handling time units effectively. In `ms_deisotope`, time\nis in minutes. This was one reason I implemented the `unitint/unitfloat`\ntypes for pyteomics. It's compelling to want to be able slice time with\nconstants because it's natural, but we don't have a syntax for assigning\nunits, and my impression is that if by fiat we declared the default unit\nwere minutes, it wouldn't be a unanimously accepted thing.\n\nIncidentally, building a scan metadata index is something that is quite\nreasonable to do in parallel for mzML and mzXML, though the `map` model of\nparallelism isn't optimal, it still works. It might still be faster to\ndisable array decoding and sequentially parse the file still.\n\nThe other thing is, do you personally have a use-case for these index\ntricks?", "markup": "markdown", "html": "<p>Time is really easy <em>iff</em> the file is sorted by retention time to begin\nwith. Most vendor files are, but this is not a guarantee. MSConvert\nincludes a command line switch <code>--sortByScanTime</code> for this purpose. If the\nfile is sorted, then this is a simple binary search problem without adding\na second index. I use the existing pyteomics XML readers to solve it <a data-is-external-link=\"true\" href=\"https://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/xml_reader.py#L136-L187\" rel=\"nofollow\">here</a>.</p>\n<p>What's trickier is handling time units effectively. In <code>ms_deisotope</code>, time\nis in minutes. This was one reason I implemented the <code>unitint/unitfloat</code>\ntypes for pyteomics. It's compelling to want to be able slice time with\nconstants because it's natural, but we don't have a syntax for assigning\nunits, and my impression is that if by fiat we declared the default unit\nwere minutes, it wouldn't be a unanimously accepted thing.</p>\n<p>Incidentally, building a scan metadata index is something that is quite\nreasonable to do in parallel for mzML and mzXML, though the <code>map</code> model of\nparallelism isn't optimal, it still works. It might still be faster to\ndisable array decoding and sequentially parse the file still.</p>\n<p>The other thing is, do you personally have a use-case for these index\ntricks?</p>", "type": "rendered"}, "created_on": "2018-09-15T01:50:12.882612+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-15T01:50:12.936084+00:00", "type": "pullrequest_comment", "id": 76086884}