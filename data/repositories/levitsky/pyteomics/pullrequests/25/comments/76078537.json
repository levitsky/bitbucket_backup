{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76078537.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76078537"}}, "parent": {"id": 76042459, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76042459.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76042459"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "My thinking was that slice handling could be moved implicitly to `get_by_index` if we have it implemented in `OffsetIndex`:\n\n```python\nclass OffsetIndex(OrderedDict):\n    def from_index(self, index, include_value=False):\n        items = tuple(self.items())\n        if include_value:\n            return items[index] # supports slices already\n        else:\n            return items[index][0] # can be tweaked to also support slices but maybe there's no need to\n```\n\nThen in reader:\n\n```python\ndef get_by_id(self, id, element_type=None):\n    offset = self.index.find(id, element_type)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef get_by_index(self, index):\n    items = self.index[self._primary_iteration_element].from_index(index, True)\n    if not items: # empty slice\n        return []\n    if isinstance(items[0], tuple): # non-empty slice\n        out = []\n        for id, offset in items:\n            self.seek(offset)\n            out.append(self._generic_parse_function(id))\n        return out\n    # not a slice\n    id, offset = self.index[self._primary_iteration_element].from_index(index, True)\n    self.seek(offset)\n    return self._generic_parse_function(id) # or rather, self._parse_entry()\n\ndef __getitem__(self, ix):\n    if isinstance(ix, str):\n        return self.get_by_id(ix)\n    return self.get_by_index(ix) # int or slice\n```\n\nBut now that I've typed it out, I see that it doesn't save any code lines. Arguably dealing with slices in `OffsetIndex` is better, but it kind of already happens, and I don't care about slice support in `get_by_idex` all that much, so your code is probably better.\n\nThen we can also take another step further and support string slices like pandas\u2026", "markup": "markdown", "html": "<p>My thinking was that slice handling could be moved implicitly to <code>get_by_index</code> if we have it implemented in <code>OffsetIndex</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">OffsetIndex</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">include_value</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">include_value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"c1\"># supports slices already</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># can be tweaked to also support slices but maybe there&#39;s no need to</span>\n</pre></div>\n\n\n<p>Then in reader:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_by_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_by_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"c1\"># empty slice</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span> <span class=\"c1\"># non-empty slice</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n    <span class=\"c1\"># not a slice</span>\n    <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"c1\"># or rather, self._parse_entry()</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ix</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_id</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_index</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span> <span class=\"c1\"># int or slice</span>\n</pre></div>\n\n\n<p>But now that I've typed it out, I see that it doesn't save any code lines. Arguably dealing with slices in <code>OffsetIndex</code> is better, but it kind of already happens, and I don't care about slice support in <code>get_by_idex</code> all that much, so your code is probably better.</p>\n<p>Then we can also take another step further and support string slices like pandas\u2026</p>", "type": "rendered"}, "created_on": "2018-09-14T21:03:09.161400+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T21:03:59.473328+00:00", "type": "pullrequest_comment", "id": 76078537}