{"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76042459.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76042459"}}, "parent": {"id": 76039945, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76039945.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76039945"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I think we're overloading things a bit too much without more defined\npseudo-code.\n```python\ndef get_by_id(self, id, element_type=None):\n    offset = self.index.find(id, element_type)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef get_by_index(self, index):\n    id, offset =\nself.index[self._primary_iteration_element].from_index(index)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef __getitem__(self, ix):\n    if isinstance(ix, str):\n        return self.get_by_id(ix)\n    elif isinstance(ix, int):\n        return self.get_by_index(ix)\n    elif isinstance(ix, slice):\n        n = len(self)\n        items = []\n        start, stop, step = i.indices(n)\n        for i in range(start, stop, step):\n            items.append(self[i])\n        return items\n```\nSo we have a defined method for indices, a defined method for ids, and\n`__getitem__` has to figure out what you want based upon the type of the\nargument, correct?", "markup": "markdown", "html": "<p>I think we're overloading things a bit too much without more defined\npseudo-code.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_by_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_by_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ix</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_id</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_index</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">):</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">):</span>\n            <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">items</span>\n</pre></div>\n\n\n<p>So we have a defined method for indices, a defined method for ids, and\n<code>__getitem__</code> has to figure out what you want based upon the type of the\nargument, correct?</p>", "type": "rendered"}, "created_on": "2018-09-14T14:40:15.328619+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T14:40:15.390783+00:00", "type": "pullrequest_comment", "id": 76042459}