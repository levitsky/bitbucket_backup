{"pagelen": 50, "values": [{"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "06f3ede59930", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/06f3ede59930"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/06f3ede59930"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "MERGED", "author": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "date": "2018-09-17T19:16:23.110375+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76228256.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76228256"}}, "parent": {"id": 76227787, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76227787.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76227787"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Sure, we can pick up this discussion elsewhere since I don't think\nBitBucket can handle another reply to some of these threads.", "markup": "markdown", "html": "<p>Sure, we can pick up this discussion elsewhere since I don't think\nBitBucket can handle another reply to some of these threads.</p>", "type": "rendered"}, "created_on": "2018-09-17T19:15:15.618175+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-17T19:15:15.703516+00:00", "type": "pullrequest_comment", "id": 76228256}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76227787.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76227787"}}, "parent": {"id": 76220541, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76220541.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76220541"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Great! Should I merge now?", "markup": "markdown", "html": "<p>Great! Should I merge now?</p>", "type": "rendered"}, "created_on": "2018-09-17T19:10:39.230583+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-17T19:10:39.240513+00:00", "type": "pullrequest_comment", "id": 76227787}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "06f3ede59930", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/06f3ede59930"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/06f3ede59930"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-09-17T18:09:59.998839+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76220541.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76220541"}}, "parent": {"id": 76212960, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76212960.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76212960"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Sadly, though it seems like OrderedDict should offer an `index` method like\n`list` does, it doesn't. It also doesn't expose the underlying\nimplementation so we can't query the order directly. *If* we know an index\nwon't change, we can copy the index once and store the list rather than\nrepeatedly copying it every time, and this isn't a bad idea given that\nPyteomics doesn't mutate files under normal operation.\n\nI think `from_index` shouldn't deal with slices. It supported them only by\nshear coincidence. It's easy enough to add a second method `from_slice` to\ndo the same thing but handle the slice explicitly.", "markup": "markdown", "html": "<p>Sadly, though it seems like OrderedDict should offer an <code>index</code> method like\n<code>list</code> does, it doesn't. It also doesn't expose the underlying\nimplementation so we can't query the order directly. <em>If</em> we know an index\nwon't change, we can copy the index once and store the list rather than\nrepeatedly copying it every time, and this isn't a bad idea given that\nPyteomics doesn't mutate files under normal operation.</p>\n<p>I think <code>from_index</code> shouldn't deal with slices. It supported them only by\nshear coincidence. It's easy enough to add a second method <code>from_slice</code> to\ndo the same thing but handle the slice explicitly.</p>", "type": "rendered"}, "created_on": "2018-09-17T17:55:19.266433+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-17T17:55:19.359437+00:00", "type": "pullrequest_comment", "id": 76220541}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76212960.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76212960"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I wanted to finalize the implementation \\(and function\\) of `OffsetIndex.from_index.`  Is it supposed to support slices? It kind of does now, but the reader slice indexing you suggested doesn\u2019t use it.\n\nMy first impulse is to think all integer-related indexing on the reader should go through `OffsetIndex.from_index`. It looks like manual handling of slices kind of duplicates what the current `from_index` can do out of the box.\n\nAlternatively, if it only supports single ints, do we really need to build a whole copy of the index to get one item?", "markup": "markdown", "html": "<p>I wanted to finalize the implementation (and function) of <code>OffsetIndex.from_index.</code>  Is it supposed to support slices? It kind of does now, but the reader slice indexing you suggested doesn\u2019t use it.</p>\n<p>My first impulse is to think all integer-related indexing on the reader should go through <code>OffsetIndex.from_index</code>. It looks like manual handling of slices kind of duplicates what the current <code>from_index</code> can do out of the box.</p>\n<p>Alternatively, if it only supports single ints, do we really need to build a whole copy of the index to get one item?</p>", "type": "rendered"}, "created_on": "2018-09-17T16:40:49.427009+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-17T16:40:49.435327+00:00", "type": "pullrequest_comment", "id": 76212960}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76212569.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76212569"}}, "parent": {"id": 76206602, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76206602.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76206602"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Searching an mzML file of 70,000 scans over 360 minutes for the scan nearest to 300 minutes took 0.5 seconds on a NFS, so < 1 seconds on a normal centroided file, might be closer to 1 second for profile compressed data.\n\nBuilding a time index by slurping the file through a regex means writing a new file indexer for every format. Then again, mzML, mzXML, and MGF all store their scan times differently so it\u2019s not like any solution to this problem is going to be truly portable unless we implement a compatibility layer, though I\u2019m a bit biased in this regard.\n\nI search for scans by time all of the time too, but mostly for exploration work, and I\u2019ve got auxiliary indices in memory by that point too.", "markup": "markdown", "html": "<p>Searching an mzML file of 70,000 scans over 360 minutes for the scan nearest to 300 minutes took 0.5 seconds on a NFS, so &lt; 1 seconds on a normal centroided file, might be closer to 1 second for profile compressed data.</p>\n<p>Building a time index by slurping the file through a regex means writing a new file indexer for every format. Then again, mzML, mzXML, and MGF all store their scan times differently so it\u2019s not like any solution to this problem is going to be truly portable unless we implement a compatibility layer, though I\u2019m a bit biased in this regard.</p>\n<p>I search for scans by time all of the time too, but mostly for exploration work, and I\u2019ve got auxiliary indices in memory by that point too.</p>", "type": "rendered"}, "created_on": "2018-09-17T16:36:54.277266+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-17T16:36:54.412858+00:00", "type": "pullrequest_comment", "id": 76212569}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76209697.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76209697"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Okay. I\u2019m not sure which changes you want me to make prior to merging.", "markup": "markdown", "html": "<p>Okay. I\u2019m not sure which changes you want me to make prior to merging.</p>", "type": "rendered"}, "created_on": "2018-09-17T16:12:53.602465+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-17T16:12:53.676323+00:00", "type": "pullrequest_comment", "id": 76209697}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76209072.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76209072"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Okay, this is a lot of comments. I suggest merging this with minimal changes, then adding rich indexing and RT search \\(I should be able to do this after we finish the discussion in the comments\\), then going back to `iterfind` and `chain` facades \\(would be nice if you help with these\\).", "markup": "markdown", "html": "<p>Okay, this is a lot of comments. I suggest merging this with minimal changes, then adding rich indexing and RT search (I should be able to do this after we finish the discussion in the comments), then going back to <code>iterfind</code> and <code>chain</code> facades (would be nice if you help with these).</p>", "type": "rendered"}, "created_on": "2018-09-17T16:07:57.602686+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-17T16:07:57.612876+00:00", "type": "pullrequest_comment", "id": 76209072}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76206602.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76206602"}}, "parent": {"id": 76086884, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76086884.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76086884"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I didn\u2019t know about unsorted files \\(or sorted in other ways\\) and I think I\u2019m going to pretend I still don\u2019t.\n\nWithout the index, access by time probably requires parsing a couple dozen entries before you find the right one, which is up to a couple of seconds, is that right? \n\nAs for units, my first thought would be to ignore this as well, treating time as floats in whatever units the vendor uses. This should be expected behavior since we never convert any units in the output.\n\nBuilding the index by actually parsing the whole file doesn\u2019t sound sensible in terms of time saving. I thought we could use the same machinery that we employ for byte offset index creation, just change the attribute name we are looking for. Same with MGF, just look for RTINSECONDS instead of TITLE.\n\nUse case is a trick question. But one out of one colleagues I polled have searched spectra by time in the past.", "markup": "markdown", "html": "<p>I didn\u2019t know about unsorted files (or sorted in other ways) and I think I\u2019m going to pretend I still don\u2019t.</p>\n<p>Without the index, access by time probably requires parsing a couple dozen entries before you find the right one, which is up to a couple of seconds, is that right? </p>\n<p>As for units, my first thought would be to ignore this as well, treating time as floats in whatever units the vendor uses. This should be expected behavior since we never convert any units in the output.</p>\n<p>Building the index by actually parsing the whole file doesn\u2019t sound sensible in terms of time saving. I thought we could use the same machinery that we employ for byte offset index creation, just change the attribute name we are looking for. Same with MGF, just look for RTINSECONDS instead of TITLE.</p>\n<p>Use case is a trick question. But one out of one colleagues I polled have searched spectra by time in the past.</p>", "type": "rendered"}, "created_on": "2018-09-17T15:55:04.073158+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-17T15:55:04.088412+00:00", "type": "pullrequest_comment", "id": 76206602}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76086884.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76086884"}}, "parent": {"id": 76082624, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76082624.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76082624"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Time is really easy *iff* the file is sorted by retention time to begin\nwith. Most vendor files are, but this is not a guarantee. MSConvert\nincludes a command line switch `--sortByScanTime` for this purpose. If the\nfile is sorted, then this is a simple binary search problem without adding\na second index. I use the existing pyteomics XML readers to solve it [here](\nhttps://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/xml_reader.py#L136-L187\n).\n\nWhat's trickier is handling time units effectively. In `ms_deisotope`, time\nis in minutes. This was one reason I implemented the `unitint/unitfloat`\ntypes for pyteomics. It's compelling to want to be able slice time with\nconstants because it's natural, but we don't have a syntax for assigning\nunits, and my impression is that if by fiat we declared the default unit\nwere minutes, it wouldn't be a unanimously accepted thing.\n\nIncidentally, building a scan metadata index is something that is quite\nreasonable to do in parallel for mzML and mzXML, though the `map` model of\nparallelism isn't optimal, it still works. It might still be faster to\ndisable array decoding and sequentially parse the file still.\n\nThe other thing is, do you personally have a use-case for these index\ntricks?", "markup": "markdown", "html": "<p>Time is really easy <em>iff</em> the file is sorted by retention time to begin\nwith. Most vendor files are, but this is not a guarantee. MSConvert\nincludes a command line switch <code>--sortByScanTime</code> for this purpose. If the\nfile is sorted, then this is a simple binary search problem without adding\na second index. I use the existing pyteomics XML readers to solve it <a data-is-external-link=\"true\" href=\"https://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/xml_reader.py#L136-L187\" rel=\"nofollow\">here</a>.</p>\n<p>What's trickier is handling time units effectively. In <code>ms_deisotope</code>, time\nis in minutes. This was one reason I implemented the <code>unitint/unitfloat</code>\ntypes for pyteomics. It's compelling to want to be able slice time with\nconstants because it's natural, but we don't have a syntax for assigning\nunits, and my impression is that if by fiat we declared the default unit\nwere minutes, it wouldn't be a unanimously accepted thing.</p>\n<p>Incidentally, building a scan metadata index is something that is quite\nreasonable to do in parallel for mzML and mzXML, though the <code>map</code> model of\nparallelism isn't optimal, it still works. It might still be faster to\ndisable array decoding and sequentially parse the file still.</p>\n<p>The other thing is, do you personally have a use-case for these index\ntricks?</p>", "type": "rendered"}, "created_on": "2018-09-15T01:50:12.882612+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-15T01:50:12.936084+00:00", "type": "pullrequest_comment", "id": 76086884}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76082624.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76082624"}}, "parent": {"id": 76080739, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76080739.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76080739"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Yes, that's what I was thinking.\n\nNow I am starting to think it's a good idea to reuse the chunk parsing to\noptionally build a scan time index and do binary searches in it for things\nlike `reader.get_interval(20.3, 30.0)` or `reader.time[20.3:30]`... I\ndefinitely need to stop somewhere.", "markup": "markdown", "html": "<p>Yes, that's what I was thinking.</p>\n<p>Now I am starting to think it's a good idea to reuse the chunk parsing to\noptionally build a scan time index and do binary searches in it for things\nlike <code>reader.get_interval(20.3, 30.0)</code> or <code>reader.time[20.3:30]</code>... I\ndefinitely need to stop somewhere.</p>", "type": "rendered"}, "created_on": "2018-09-14T22:30:12.870668+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T22:30:12.906996+00:00", "type": "pullrequest_comment", "id": 76082624}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76080739.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76080739"}}, "parent": {"id": 76079949, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76079949.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76079949"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Something along the lines of\n```python\n# In OffsetIndex\ndef keys_between(self, start, stop):\n    keys = list(self.keys())\n    try:\n        start_index = keys.index(start)\n    except ValueError:\n        raise KeyError(start)\n    try:\n        stop_index = keys.index(stop)\n    except ValueError:\n        raise KeyError(stop)\n    start_index, stop_index = min(start_index, stop_index),\nmax(start_index, stop_index)\n    return keys[start_index:stop_index + 1]\n```", "markup": "markdown", "html": "<p>Something along the lines of</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># In OffsetIndex</span>\n<span class=\"k\">def</span> <span class=\"nf\">keys_between</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">):</span>\n    <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">start_index</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">stop_index</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n    <span class=\"n\">start_index</span><span class=\"p\">,</span> <span class=\"n\">stop_index</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">start_index</span><span class=\"p\">,</span> <span class=\"n\">stop_index</span><span class=\"p\">),</span>\n<span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">start_index</span><span class=\"p\">,</span> <span class=\"n\">stop_index</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"n\">start_index</span><span class=\"p\">:</span><span class=\"n\">stop_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-09-14T21:45:15.109809+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T21:45:15.171865+00:00", "type": "pullrequest_comment", "id": 76080739}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76079949.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76079949"}}, "parent": {"id": 76079707, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76079707.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76079707"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I meant slices where start and stop are scan ID strings, like\ndataframe.loc['start':'stop'].", "markup": "markdown", "html": "<p>I meant slices where start and stop are scan ID strings, like\ndataframe.loc['start':'stop'].</p>", "type": "rendered"}, "created_on": "2018-09-14T21:30:17.642416+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T21:30:17.691642+00:00", "type": "pullrequest_comment", "id": 76079949}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76079707.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76079707"}}, "parent": {"id": 76078537, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76078537.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76078537"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "By string slice, do you mean `\"a\":\"f\"  = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]`?\nI'm not sure I see how to translate that this. Maybe slices where start and\nstop are scan ID strings, and then accumulating all IDs between them?\n\nSupporting this type of rich data set access is moving away from \"parsing\ndata\" into essentially \"abstract data collection access independent of disk\nformat\", basically moving towards composing data extraction and\ntransformation operations in the form of Python expressions like SymPy,\nSQLAlchemy or one of the hundred matrix/vector expression compilers, which\nI won't lie and say I didn't think about, but I then I had to back up\nbecause that type of abstraction requires *a lot* of code bordering on\nwriting your own sub-language, and in our case, it'd still be executing\nPython code, not SQL, or a numerical VM.", "markup": "markdown", "html": "<p>By string slice, do you mean <code>\"a\":\"f\"  = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]</code>?\nI'm not sure I see how to translate that this. Maybe slices where start and\nstop are scan ID strings, and then accumulating all IDs between them?</p>\n<p>Supporting this type of rich data set access is moving away from \"parsing\ndata\" into essentially \"abstract data collection access independent of disk\nformat\", basically moving towards composing data extraction and\ntransformation operations in the form of Python expressions like SymPy,\nSQLAlchemy or one of the hundred matrix/vector expression compilers, which\nI won't lie and say I didn't think about, but I then I had to back up\nbecause that type of abstraction requires <em>a lot</em> of code bordering on\nwriting your own sub-language, and in our case, it'd still be executing\nPython code, not SQL, or a numerical VM.</p>", "type": "rendered"}, "created_on": "2018-09-14T21:25:13.727782+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T21:25:13.772510+00:00", "type": "pullrequest_comment", "id": 76079707}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76078537.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76078537"}}, "parent": {"id": 76042459, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76042459.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76042459"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "My thinking was that slice handling could be moved implicitly to `get_by_index` if we have it implemented in `OffsetIndex`:\n\n```python\nclass OffsetIndex(OrderedDict):\n    def from_index(self, index, include_value=False):\n        items = tuple(self.items())\n        if include_value:\n            return items[index] # supports slices already\n        else:\n            return items[index][0] # can be tweaked to also support slices but maybe there's no need to\n```\n\nThen in reader:\n\n```python\ndef get_by_id(self, id, element_type=None):\n    offset = self.index.find(id, element_type)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef get_by_index(self, index):\n    items = self.index[self._primary_iteration_element].from_index(index, True)\n    if not items: # empty slice\n        return []\n    if isinstance(items[0], tuple): # non-empty slice\n        out = []\n        for id, offset in items:\n            self.seek(offset)\n            out.append(self._generic_parse_function(id))\n        return out\n    # not a slice\n    id, offset = self.index[self._primary_iteration_element].from_index(index, True)\n    self.seek(offset)\n    return self._generic_parse_function(id) # or rather, self._parse_entry()\n\ndef __getitem__(self, ix):\n    if isinstance(ix, str):\n        return self.get_by_id(ix)\n    return self.get_by_index(ix) # int or slice\n```\n\nBut now that I've typed it out, I see that it doesn't save any code lines. Arguably dealing with slices in `OffsetIndex` is better, but it kind of already happens, and I don't care about slice support in `get_by_idex` all that much, so your code is probably better.\n\nThen we can also take another step further and support string slices like pandas\u2026", "markup": "markdown", "html": "<p>My thinking was that slice handling could be moved implicitly to <code>get_by_index</code> if we have it implemented in <code>OffsetIndex</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">OffsetIndex</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">include_value</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">include_value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"c1\"># supports slices already</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># can be tweaked to also support slices but maybe there&#39;s no need to</span>\n</pre></div>\n\n\n<p>Then in reader:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_by_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_by_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"c1\"># empty slice</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span> <span class=\"c1\"># non-empty slice</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n    <span class=\"c1\"># not a slice</span>\n    <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"c1\"># or rather, self._parse_entry()</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ix</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_id</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_index</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span> <span class=\"c1\"># int or slice</span>\n</pre></div>\n\n\n<p>But now that I've typed it out, I see that it doesn't save any code lines. Arguably dealing with slices in <code>OffsetIndex</code> is better, but it kind of already happens, and I don't care about slice support in <code>get_by_idex</code> all that much, so your code is probably better.</p>\n<p>Then we can also take another step further and support string slices like pandas\u2026</p>", "type": "rendered"}, "created_on": "2018-09-14T21:03:09.161400+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T21:03:59.473328+00:00", "type": "pullrequest_comment", "id": 76078537}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76042461.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76042461"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I think I missed something about indexing with lists? Like this:\n```python\nif isinstance(ix, Iterable) and not isinstance(ix, str):\n    items = [self[k] for k in ix]\n    return items\n```\n", "markup": "markdown", "html": "<p>I think I missed something about indexing with lists? Like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">ix</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">items</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-09-14T14:40:15.386094+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T14:40:15.435217+00:00", "type": "pullrequest_comment", "id": 76042461}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76042459.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76042459"}}, "parent": {"id": 76039945, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76039945.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76039945"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I think we're overloading things a bit too much without more defined\npseudo-code.\n```python\ndef get_by_id(self, id, element_type=None):\n    offset = self.index.find(id, element_type)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef get_by_index(self, index):\n    id, offset =\nself.index[self._primary_iteration_element].from_index(index)\n    self.seek(offset)\n    return self._generic_parse_function(id)\n\ndef __getitem__(self, ix):\n    if isinstance(ix, str):\n        return self.get_by_id(ix)\n    elif isinstance(ix, int):\n        return self.get_by_index(ix)\n    elif isinstance(ix, slice):\n        n = len(self)\n        items = []\n        start, stop, step = i.indices(n)\n        for i in range(start, stop, step):\n            items.append(self[i])\n        return items\n```\nSo we have a defined method for indices, a defined method for ids, and\n`__getitem__` has to figure out what you want based upon the type of the\nargument, correct?", "markup": "markdown", "html": "<p>I think we're overloading things a bit too much without more defined\npseudo-code.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_by_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">element_type</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_by_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_element</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ix</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_id</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_by_index</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">):</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">):</span>\n            <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">items</span>\n</pre></div>\n\n\n<p>So we have a defined method for indices, a defined method for ids, and\n<code>__getitem__</code> has to figure out what you want based upon the type of the\nargument, correct?</p>", "type": "rendered"}, "created_on": "2018-09-14T14:40:15.328619+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T14:40:15.390783+00:00", "type": "pullrequest_comment", "id": 76042459}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76039945.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76039945"}}, "parent": {"id": 76037971, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76037971.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76037971"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Oh, slices are fun!\n\nBut if we are already building a list \\(or rather, tuple\\) of \\(key, offset\\) pairs, isn't it easier to just use its `__getitem__` for all cases except strings?\n\nThen in the reader we just get `self.index[key]` and then branch on whether it\u2019s an int or a list?", "markup": "markdown", "html": "<p>Oh, slices are fun!</p>\n<p>But if we are already building a list (or rather, tuple) of (key, offset) pairs, isn't it easier to just use its <code>__getitem__</code> for all cases except strings?</p>\n<p>Then in the reader we just get <code>self.index[key]</code> and then branch on whether it\u2019s an int or a list?</p>", "type": "rendered"}, "created_on": "2018-09-14T14:23:22.075404+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T14:23:22.083980+00:00", "type": "pullrequest_comment", "id": 76039945}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76037971.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76037971"}}, "parent": {"id": 76034561, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76034561.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76034561"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "That's fine by me, and the scenario I described was just a what-if-type\nproblem that crops up with weak type contracts in dynamic languages, not\none we're facing right now.\n\nDo you want to support slices as well? It complicates things a bit, but\nI've worked out the index problem already in [ms_deisotope](\nhttps://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/common.py#L689-L714\n).\n", "markup": "markdown", "html": "<p>That's fine by me, and the scenario I described was just a what-if-type\nproblem that crops up with weak type contracts in dynamic languages, not\none we're facing right now.</p>\n<p>Do you want to support slices as well? It complicates things a bit, but\nI've worked out the index problem already in <a data-is-external-link=\"true\" href=\"https://github.com/mobiusklein/ms_deisotope/blob/master/ms_deisotope/data_source/common.py#L689-L714\" rel=\"nofollow\">ms_deisotope</a>.</p>", "type": "rendered"}, "created_on": "2018-09-14T14:10:21.413188+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-14T14:10:21.453227+00:00", "type": "pullrequest_comment", "id": 76037971}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/76034561.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-76034561"}}, "parent": {"id": 75960505, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75960505.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75960505"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "By the way, I kind of assumed the keys to always be strings, because they are extracted as regex groups without further processing. I think it\u2019s better to keep it that way, even if the same attribute is converted to an int in the parsed dict.", "markup": "markdown", "html": "<p>By the way, I kind of assumed the keys to always be strings, because they are extracted as regex groups without further processing. I think it\u2019s better to keep it that way, even if the same attribute is converted to an int in the parsed dict.</p>", "type": "rendered"}, "created_on": "2018-09-14T13:47:51.489145+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-14T13:47:51.498817+00:00", "type": "pullrequest_comment", "id": 76034561}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959773.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959773"}}, "parent": {"id": 75959283, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959283.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959283"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Okay. What about adding `from_index` for `HierarchicalIndex` and then for `IndexedXML` and `IndexedTextReader`?\n\nIt can accept an `element_type` argument like `find` and default to the default tag, in case of XML.", "markup": "markdown", "html": "<p>Okay. What about adding <code>from_index</code> for <code>HierarchicalIndex</code> and then for <code>IndexedXML</code> and <code>IndexedTextReader</code>?</p>\n<p>It can accept an <code>element_type</code> argument like <code>find</code> and default to the default tag, in case of XML.</p>", "type": "rendered"}, "created_on": "2018-09-13T23:20:35.980875+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-13T23:35:22.590744+00:00", "type": "pullrequest_comment", "id": 75959773}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75960505.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75960505"}}, "parent": {"id": 75959773, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959773.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959773"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "For `HierarchicalIndex`, you would instead do\n`index['ElementType'].from_index(1231)`. There isn't a clean way to omit\nthe first `__getitem__` call, unless we tell the hierarchical index which\nbin to direct integer queries to.\n\nSo such a `__getitem__` implementation would look something like this:\n```python\ndef __getitem__(self, ix):\n    try:\n        offset = self.index.find(ix)\n        self.seek(offset)\n        return self._generic_parse_function(ix)\n    except KeyError:\n        if isinstance(ix, int):\n            key, offset =\nself.index[self._primary_iteration_key].from_index(ix, True)\n            self.seek(offset)\n            return self._generic_parse_function(key)\n        raise\n```", "markup": "markdown", "html": "<p>For <code>HierarchicalIndex</code>, you would instead do\n<code>index['ElementType'].from_index(1231)</code>. There isn't a clean way to omit\nthe first <code>__getitem__</code> call, unless we tell the hierarchical index which\nbin to direct integer queries to.</p>\n<p>So such a <code>__getitem__</code> implementation would look something like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ix</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_iteration_key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_index</span><span class=\"p\">(</span><span class=\"n\">ix</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_generic_parse_function</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-09-13T23:35:17.560041+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-13T23:35:17.611375+00:00", "type": "pullrequest_comment", "id": 75960505}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75960504.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75960504"}}, "parent": {"id": 75959625, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959625.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959625"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Facades are great. Half of pandas is just facades.", "markup": "markdown", "html": "<p>Facades are great. Half of pandas is just facades.</p>", "type": "rendered"}, "created_on": "2018-09-13T23:35:17.453024+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-13T23:35:17.509772+00:00", "type": "pullrequest_comment", "id": 75960504}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959625.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959625"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Also the comments about the `Chain` class are now gone, but I wanted to say that I like the idea of extending the map support to chains. I also like your previous suggestion for `iterfind`, I want to get back to that when the paper is submitted.", "markup": "markdown", "html": "<p>Also the comments about the <code>Chain</code> class are now gone, but I wanted to say that I like the idea of extending the map support to chains. I also like your previous suggestion for <code>iterfind</code>, I want to get back to that when the paper is submitted.</p>", "type": "rendered"}, "created_on": "2018-09-13T23:17:22.503320+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-13T23:17:22.510385+00:00", "type": "pullrequest_comment", "id": 75959625}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959283.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959283"}}, "parent": {"id": 75958578, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958578.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958578"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "We get into semantically messy territory because keys may be strings that look like integers, or keys may be integers, and our schema extraction process might still retain them as strings \\(looking at mzXML here\\). Then there's the issue with integer indexing and hierarchical indices. When we use a hierarchical index, it tries every index until one succeeds. With an integer index, it doesn't have the uniqueness constraint on the ID between bins to work with, so we'd have to limit it to just the primary iteration sequence. It just means an overloaded `__getitem__` that is not an alias of get\\_by\\_id or get\\_entry or whatever the method is on that reader.", "markup": "markdown", "html": "<p>We get into semantically messy territory because keys may be strings that look like integers, or keys may be integers, and our schema extraction process might still retain them as strings (looking at mzXML here). Then there's the issue with integer indexing and hierarchical indices. When we use a hierarchical index, it tries every index until one succeeds. With an integer index, it doesn't have the uniqueness constraint on the ID between bins to work with, so we'd have to limit it to just the primary iteration sequence. It just means an overloaded <code>__getitem__</code> that is not an alias of get_by_id or get_entry or whatever the method is on that reader.</p>", "type": "rendered"}, "created_on": "2018-09-13T23:10:13.007579+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "updated_on": "2018-09-13T23:14:08.213593+00:00", "type": "pullrequest_comment", "id": 75959283}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "ec092a161503", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/ec092a161503"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/ec092a161503"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-09-13T23:10:50.265338+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75959010.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75959010"}}, "parent": {"id": 75958708, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958708.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958708"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Well, I don\u2019t know how to cherry pick in Git, let alone Mercurial. Yes,\nit\u2019s not finished. I was planning to implement a facade class that would\nreplace the current closure form of _make_chain that would provide a map\nmethod to automatically chain together calls to map on the underlying file\nsequence, similar to the facade I suggested for iterfind. I was tinkering\nwith it until I realized I didn\u2019t know enough about how the context manager\npart of _make_chain worked, and I don\u2019t actually use it so I was just going\nto shelve it until later.\n\nI suppose I can just delete it and that will clean up the file in the\nbranch and propagate to the PR.", "markup": "markdown", "html": "<p>Well, I don\u2019t know how to cherry pick in Git, let alone Mercurial. Yes,\nit\u2019s not finished. I was planning to implement a facade class that would\nreplace the current closure form of _make_chain that would provide a map\nmethod to automatically chain together calls to map on the underlying file\nsequence, similar to the facade I suggested for iterfind. I was tinkering\nwith it until I realized I didn\u2019t know enough about how the context manager\npart of _make_chain worked, and I don\u2019t actually use it so I was just going\nto shelve it until later.</p>\n<p>I suppose I can just delete it and that will clean up the file in the\nbranch and propagate to the PR.</p>", "type": "rendered"}, "created_on": "2018-09-13T23:05:12.377270+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-09-13T23:05:12.423982+00:00", "type": "pullrequest_comment", "id": 75959010}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958708.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958708"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "This isn't mentioned anywhere. Looks like a substitute for the `_make_chain` mess, but is it finished?", "markup": "markdown", "html": "<p>This isn't mentioned anywhere. Looks like a substitute for the <code>_make_chain</code> mess, but is it finished?</p>", "type": "rendered"}, "created_on": "2018-09-13T22:59:01.273507+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-09-13T22:59:01.279514+00:00", "type": "pullrequest_comment", "id": 75958708}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958578.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958578"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Thank you for the fixes. Amazing how I keep overlooking the fact that some of the tests break.\n\nI was actually going to ask your opinion on integer \\(positional\\) indexing. I see you added a way to explicitly query the index for the key or key\\+offset. Do you think we should also add integer support to `__getitem__` on the readers?", "markup": "markdown", "html": "<p>Thank you for the fixes. Amazing how I keep overlooking the fact that some of the tests break.</p>\n<p>I was actually going to ask your opinion on integer (positional) indexing. I see you added a way to explicitly query the index for the key or key+offset. Do you think we should also add integer support to <code>__getitem__</code> on the readers?</p>", "type": "rendered"}, "created_on": "2018-09-13T22:56:21.749055+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "updated_on": "2018-09-13T22:56:21.755119+00:00", "type": "pullrequest_comment", "id": 75958578}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958427.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958427"}}, "parent": {"id": 75958289, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958289.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958289"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I have this same exact code in `psims.controlled_vocabulary.unimod` that I have test on Py2.7 and 3.6 on Travis-CI, and it worked fine there too. I put a virtualenv Py3.6 on my university\u2019s cluster to run some tests while writing the other changes shown here, and this appeared out of nowhere.", "markup": "markdown", "html": "<p>I have this same exact code in <code>psims.controlled_vocabulary.unimod</code> that I have test on Py2.7 and 3.6 on Travis-CI, and it worked fine there too. I put a virtualenv Py3.6 on my university\u2019s cluster to run some tests while writing the other changes shown here, and this appeared out of nowhere.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:53:12.551835+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-09-13T22:53:12.610023+00:00", "type": "pullrequest_comment", "id": 75958427}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958289.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958289"}}, "parent": {"id": 75958170, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958170.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958170"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Interesting. In my Linux environment it worked just fine, or at least the tests ran without issues.", "markup": "markdown", "html": "<p>Interesting. In my Linux environment it worked just fine, or at least the tests ran without issues.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:50:24.367475+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-09-13T22:50:24.378864+00:00", "type": "pullrequest_comment", "id": 75958289}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "386b5af23730", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/386b5af23730"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/386b5af23730"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-09-13T22:50:03.121517+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958205.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958205"}}, "parent": {"id": 75957768, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957768.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957768"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I meant just the key.", "markup": "markdown", "html": "<p>I meant just the key.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:48:52.124597+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-09-13T22:48:52.159639+00:00", "type": "pullrequest_comment", "id": 75958205}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958170.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958170"}}, "parent": {"id": 75957925, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957925.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957925"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "What changed was an inconsistent regex for parsing Unimod formulae that didn\u2019t compile on Py3.6 on some Unix machines, but did work on Windows, somehow.", "markup": "markdown", "html": "<p>What changed was an inconsistent regex for parsing Unimod formulae that didn\u2019t compile on Py3.6 on some Unix machines, but did work on Windows, somehow.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:47:53.575604+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-09-13T22:47:53.629752+00:00", "type": "pullrequest_comment", "id": 75958170}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75958014.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75958014"}}, "parent": {"id": 75957667, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957667.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957667"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I wanted to be explicit about the fact I was iterating over the keys, in case it later became semantically useful to have `__iter__` do something else. I'm overloading `__len__` to get the total number of items in the index, not just the number of buckets.", "markup": "markdown", "html": "<p>I wanted to be explicit about the fact I was iterating over the keys, in case it later became semantically useful to have <code>__iter__</code> do something else. I'm overloading <code>__len__</code> to get the total number of items in the index, not just the number of buckets.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:45:10.602662+00:00", "user": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "inline": {}, "updated_on": "2018-09-13T22:45:10.670199+00:00", "type": "pullrequest_comment", "id": 75958014}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957925.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957925"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "I have no idea what changed in here, thanks to BitBucket. But I\u2019m going to trust you on this one.", "markup": "markdown", "html": "<p>I have no idea what changed in here, thanks to BitBucket. But I\u2019m going to trust you on this one.</p>", "type": "rendered"}, "created_on": "2018-09-13T22:43:49.673342+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-09-13T22:43:49.681099+00:00", "type": "pullrequest_comment", "id": 75957925}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957768.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957768"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Did you mean to say \u201c\u2026 or just the key\u201d or am missing something?", "markup": "markdown", "html": "<p>Did you mean to say \u201c\u2026 or just the key\u201d or am missing something?</p>", "type": "rendered"}, "created_on": "2018-09-13T22:40:54.481720+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-09-13T22:40:54.488356+00:00", "type": "pullrequest_comment", "id": 75957768}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"comment": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25/comments/75957667.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25/_/diff#comment-75957667"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}, "content": {"raw": "Just curious: does explicit iteration over `.keys()` win something over the usual `for key in dict` idiom here?", "markup": "markdown", "html": "<p>Just curious: does explicit iteration over <code>.keys()</code> win something over the usual <code>for key in dict</code> idiom here?</p>", "type": "rendered"}, "created_on": "2018-09-13T22:38:53.043488+00:00", "user": {"display_name": "Lev Levitsky", "uuid": "{eb44325f-4ee0-4e0b-a27c-f2ea23122a56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D"}, "html": {"href": "https://bitbucket.org/%7Beb44325f-4ee0-4e0b-a27c-f2ea23122a56%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a2593c44c42429c503d2e5e9e307e241d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLL-6.png"}}, "nickname": "levitsky", "type": "user", "account_id": "557058:986c547b-c50a-40b3-948a-29b4a93b7b30"}, "inline": {}, "updated_on": "2018-09-13T22:39:05.759365+00:00", "type": "pullrequest_comment", "id": 75957667}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "0f882e3f4a62", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/0f882e3f4a62"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/0f882e3f4a62"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-09-13T15:59:31.187359+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}, {"update": {"description": "* fix: Make unimod formula parsers reliably work on all Python versions\r\n* fix: Adapt mzid\\_spectra to match new \\_handle\\_param policy for missing values\r\n* feature: Made the offset index a part of the Indexed reader interface\r\n\r\n    1. Refactored \\_offset\\_index to be of a type that consistently provides a `find` method\r\n    2. Made `.index` a property on all Indexed readers that returns the offset index", "title": "Update for 4.0", "destination": {"commit": {"hash": "3ff1d5dd257c", "type": "commit", "links": {"self": {"href": "data/repositories/levitsky/pyteomics/commit/3ff1d5dd257c.json"}, "html": {"href": "#!/levitsky/pyteomics/commits/3ff1d5dd257c"}}}, "repository": {"links": {"self": {"href": "data/repositories/levitsky/pyteomics.json"}, "html": {"href": "#!/levitsky/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3f6302de-10da-4d3c-b258-0bb6a2368972}ts=74456"}}, "type": "repository", "name": "pyteomics", "full_name": "levitsky/pyteomics", "uuid": "{3f6302de-10da-4d3c-b258-0bb6a2368972}"}, "branch": {"name": "4.0"}}, "reason": "", "source": {"commit": {"hash": "0f882e3f4a62", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics/commit/0f882e3f4a62"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics/commits/0f882e3f4a62"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mobiusklein/pyteomics"}, "html": {"href": "https://bitbucket.org/mobiusklein/pyteomics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3ce101ca-5477-41e1-a7e0-d31a18922eb9}ts=python"}}, "type": "repository", "name": "pyteomics", "full_name": "mobiusklein/pyteomics", "uuid": "{3ce101ca-5477-41e1-a7e0-d31a18922eb9}"}, "branch": {"name": "4.0"}}, "state": "OPEN", "author": {"display_name": "Joshua Klein", "uuid": "{919f0add-304d-4b9a-8889-d2622a3dbc96}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D"}, "html": {"href": "https://bitbucket.org/%7B919f0add-304d-4b9a-8889-d2622a3dbc96%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7d0e70bc74f783efa621a2bdd228ca22d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-3.png"}}, "nickname": "mobiusklein", "type": "user", "account_id": "557058:ff82222f-afe5-4135-a1b7-8de99a00f669"}, "date": "2018-09-13T15:59:31.129608+00:00"}, "pull_request": {"type": "pullrequest", "id": 25, "links": {"self": {"href": "data/repositories/levitsky/pyteomics/pullrequests/25.json"}, "html": {"href": "#!/levitsky/pyteomics/pull-requests/25"}}, "title": "Update for 4.0"}}]}